{"version":3,"sources":["env.ts","chess/engine/PieceMovement.ts","chess/engine/ChessPiece.ts","chess/engine/ChessQueen.ts","chess/engine/ChessPawn.ts","chess/engine/ChessBishop.ts","chess/engine/ChessRook.ts","chess/engine/ChessKing.ts","chess/engine/ChessKnight.ts","chess/engine/ChessBoard.ts","chess/misc/Bar.tsx","chess/index.tsx","misc/functions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOGGING","process","production","devLog","o","console","warn","PieceMovement","piece","prevPositionYIndex","prevPositionXIndex","positionYIndex","positionXIndex","id","name","icon","isPieceWhite","prevPosition","position","this","ChessPiece","availableXMovements","availableYMovements","el","chessBoard","ghostId","successfulMovements","ChessBoard","king","oppKing","anticipateOppMoves","_","i","board","length","j","cellPiece","availableMoves","forEach","m","anticipateMyMoves","cell","undefined","globalId","yIndex","xIndex","cb","movement","pieceHash","canmove","movements","temp","previousPositionYIndex","previousPositionXIndex","alert","history","unshift","type","ChessQueen","indexes","analyzeAndBreak","incY","incX","possiblePiece","push","Math","max","map","index","positionY","positionX","ChessPawn","_parent","prototype","move","apply","queen","incY1","incY2","ChessBishop","ChessRook","ChessKing","curr","ChessKnight","dummy","isWhiteTurnToPlay","initiated","init","blackKing","whiteKing","JSON","stringify","r","Bar","pieceWidth","horizontal","arr","className","c","x","style","width","height","f","min","window","innerHeight","innerWidth","ChessGame","useState","boardWidth","size","setSize","setBoard","movementHistory","setMovementHistory","setAvailableMoves","selectedPiece","setSelectedPiece","chessBoardRef","useRef","setIsWhiteTurnToPlay","reloadBoard","current","useEffect","addEventListener","removeEventListener","row","y","display","shouldHighlight","onClick","toString","a","onPieceClick","backgroundColor","justifyContent","alignItems","color","padding","textAlign","data","csvContent","obj","toCSV","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","csvGenerator","key","fontSize","marginBottom","marginRight","App","basename","path","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.73d00f96.chunk.js","sourcesContent":["export const LOGGING = true && !process.env.production;\nexport const devLog = (o)=> {\n    if(!LOGGING) return;\n    console.warn(o)\n\n}","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessKing } from \"./ChessKing\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class PieceMovement {\n    id: number;\n    name: string;\n    icon: string;\n    isPieceWhite: boolean\n\n    prevPositionYIndex: number;\n    prevPositionXIndex: number;\n    prevPosition: string;\n    positionYIndex: number;\n    positionXIndex: number;\n    position: string;\n\n    constructor(\n        piece: ChessPiece,\n        prevPositionYIndex: number,\n        prevPositionXIndex: number,\n        positionYIndex: number,\n        positionXIndex: number,\n\n    ) {\n\n        this.id = piece.id;\n        this.name = piece.name;\n        this.icon = piece.icon;\n        this.isPieceWhite = piece.isPieceWhite;\n        this.prevPositionYIndex = prevPositionYIndex;\n        this.prevPositionXIndex = prevPositionXIndex;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n        this.prevPosition = `${ChessPiece.availableXMovements[this.prevPositionXIndex]}${ChessPiece.availableYMovements[this.prevPositionYIndex]}`\n        this.position = `${ChessPiece.availableXMovements[this.positionXIndex]}${ChessPiece.availableYMovements[this.positionYIndex]}`\n\n    }\n    toJSON() {\n        return [\n            this.id,\n            this.name,\n            this.icon,\n            this.isPieceWhite,\n            this.prevPositionYIndex,\n            this.prevPositionXIndex,\n            this.positionYIndex,\n            this.positionXIndex,\n            this.prevPosition,\n            this.position,\n\n        ]\n\n    }\n    toCSV() {\n        return [\n            // this.id,\n            this.name,\n            this.isPieceWhite?'white':'black',\n            // this.prevPositionYIndex,\n            // this.prevPositionXIndex,\n            // this.positionYIndex,\n            // this.positionXIndex,\n            this.prevPosition,\n            this.position,\n\n        ]\n\n    }\n    fromJSON(el:any []){\n        this.id = el[0]\n        this.name = el[1]\n        this.icon = el[2]\n        this.isPieceWhite = el[3]\n        this.prevPositionYIndex = el[4]\n        this.prevPositionXIndex = el[5]\n        this.positionYIndex = el[6]\n        this.positionXIndex = el[7]\n        this.prevPosition = el[8]\n        this.position = el[9]\n\n    }\n\n\n\n}\n","import { devLog } from \"../../env\";\nimport { ChessBoard } from \"./ChessBoard\";\nimport { ChessKing } from \"./ChessKing\";\nimport { PieceMovement } from \"./PieceMovement\";\n\nexport abstract class ChessPiece {\n    name = 'piece'\n    icon = 'chess'\n    static availableXMovements = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    static availableYMovements = ['8', '7', '6', '5', '4', '3', '2', '1'];\n\n    positionXIndex = 0;\n    positionYIndex = 0;\n    isPieceWhite = true;\n    successfulMovements = 0;\n\n    chessBoard: ChessBoard = new ChessBoard(true);\n    static globalId = 0\n    id = 0\n\n    king: ChessKing | null = null;\n    oppKing: ChessKing | null = null;\n\n    constructor(\n        chessBoard: ChessBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean,\n        ghostId?: number\n    ) {\n        if (ghostId == undefined) {\n            ChessPiece.globalId++;\n            this.id = ChessPiece.globalId;\n        } else {\n            this.id = ghostId\n        }\n\n\n\n        this.chessBoard = chessBoard;\n        this.isPieceWhite = isPieceWhite;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n\n    }\n\n    anticipateOppMoves = () => {\n        const _: { [id: string]: boolean } = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cellPiece = this.chessBoard.board[i][j];\n                if (cellPiece && cellPiece.isPieceWhite !== this.isPieceWhite) {\n                    cellPiece.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n    anticipateMyMoves = () => {\n        const _ = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cell = this.chessBoard.board[i][j];\n                if (cell && cell.isPieceWhite === this.isPieceWhite) {\n                    cell.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n\n    move(yIndex: number, xIndex: number, cb?: () => void) {\n        const movement = new PieceMovement(this.chessBoard.pieceHash[this.id], this.positionYIndex, this.positionXIndex, yIndex, xIndex);\n        const availableMoves = this.availableMoves();\n        let canmove = false;\n        availableMoves.forEach(movements => {\n\n            if (movements.positionYIndex === yIndex && movements.positionXIndex === xIndex) {\n                canmove = true;\n            }\n        })\n\n        if (!canmove) {\n            return false;\n        }\n        // swap pos in board;\n        const temp = this.chessBoard.board[this.positionYIndex][this.positionXIndex]\n\n\n\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n        const previousPositionYIndex = this.positionYIndex;\n        const previousPositionXIndex = this.positionXIndex;\n        this.positionYIndex = yIndex;\n        this.positionXIndex = xIndex;\n\n        // assign new pos\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = temp;\n        // test to see if the move puts the king at risk\n        const oppMoves = this.anticipateOppMoves();\n        if (oppMoves[this.king?.positionYIndex + ',' + this.king?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('king at risk')\n\n            this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n            this.positionYIndex = previousPositionYIndex;\n            this.positionXIndex = previousPositionXIndex;\n\n            this.chessBoard.board[previousPositionYIndex][previousPositionXIndex] = temp;\n\n\n            return false;\n        }\n        const myMoves = this.anticipateMyMoves();\n        if (myMoves[this.oppKing?.positionYIndex + ',' + this.oppKing?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('check')\n\n\n\n        }\n\n        if (cb) {\n            cb()\n        }\n\n        this.successfulMovements++;\n        this.chessBoard.history.unshift(movement);\n        devLog(movement)\n        return true;\n\n\n    }\n    availableMoves = () => {\n        return [] as {\n            positionYIndex: number;\n            positionY: string;\n            positionXIndex: number;\n            positionX: string;\n        }[]\n\n    }\n\n    toString() {\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.isPieceWhite ? 'White' : 'Black',\n            position: `${ChessPiece.availableXMovements[this.positionXIndex]}${ChessPiece.availableYMovements[this.positionYIndex]}`\n        }\n            ;\n    }\n    currentPosition() {\n        return `Y = ${this.positionYIndex}, X = ${this.positionXIndex}`\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessQueen extends ChessPiece {\n    name = 'queen'\n    icon = 'fas fa-chess-queen'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex + i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex -i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex - i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i <= this.positionYIndex; i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex + i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessQueen } from \"./ChessQueen\";\nimport { ChessPiece } from \"./ChessPiece\";\nimport { ChessBoard } from \"./ChessBoard\";\n\nexport class ChessPawn extends ChessPiece {\n    name = 'pawn'\n    icon = 'fas fa-chess-pawn'\n    _parent = ChessPiece.prototype\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite,ghostId);\n    }\n\n    move = (yIndex:number, xIndex:number) => {\n\n        return this._parent.move.apply(this, [yIndex, xIndex, () => {\n            // check if its promotable\n            if (this.isPieceWhite && yIndex === 0 || !this.isPieceWhite && yIndex === 7) {\n                // promote\n                const queen = new ChessQueen(this.chessBoard, yIndex, this.positionXIndex, this.isPieceWhite,this.id);\n                queen.king = this.king;\n                queen.oppKing = this.oppKing;\n                this.chessBoard.board[this.positionYIndex][this.positionXIndex] = queen;\n            }\n\n\n        }])\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n        }[] = [];\n        const incY1 = !this.isPieceWhite ? 1 : -1;\n        const incY2 = !this.isPieceWhite ? 2 : -2;\n\n\n\n\n        // check if it can move a step in y axes and if its own piece isnt on its moves\n        if (this.positionYIndex + incY1 < ChessPiece.availableXMovements.length && this.positionYIndex + incY1 >= 0 && !this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex]) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex })\n\n            if (this.successfulMovements === 0) {\n                // check if its first time, only move if theres nothing in the way\n\n                if (this.positionYIndex + incY2 < ChessPiece.availableYMovements.length && this.positionYIndex + incY2 >= 0 && !this.chessBoard.board[this.positionYIndex + incY2][this.positionXIndex]) {\n                    indexes.push({ positionYIndex: this.positionYIndex + incY2, positionXIndex: this.positionXIndex })\n\n                }\n            }\n\n\n\n        }\n\n\n\n    \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length && this.positionYIndex + incY1 >= 0  && this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex + 1] &&this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex + 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex + 1 })\n            // check diagonal if an opp is there\n        }\n \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length  && this.positionYIndex + incY1 >= 0 && this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex - 1] &&this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex - 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex - 1 })\n            // check diagonal if an opp is there\n        }\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessBishop extends ChessPiece {\n    name = 'bishop'\n    icon = 'fas fa-chess-bishop'\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY, incX) => {\n            if (incY < 0 || incY > 7 || incX < 0 || incX > 7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n\n        // do diagonal \n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex + i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex - i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex - i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i <= Math.max(this.positionYIndex,this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex + i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessRook extends ChessPiece {\n    name = 'rook'\n    icon = 'fas fa-chess-rook'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKing extends ChessPiece {\n    name = 'king'\n    icon = 'fas fa-chess-king'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n           \n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n      \n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [1,0],\n            [0,1],\n            [-1,0],\n            [0,-1],\n\n            [1,1],\n            [-1,-1],\n            [-1,1],\n            [1,-1],\n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKnight extends ChessPiece {\n    name = 'knight'\n    icon = 'fas fa-chess-knight'\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n\n    }\n\n\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n   \n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n           \n          \n           \n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n             //   return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [2,1],\n            [2,-1],\n            [-2,1],\n            [-2,-1],\n            [1,2],\n            [1,-2],\n            [-1,2],\n            [-1,-2],\n      \n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n\n}\n","import { ChessPawn } from \"./ChessPawn\";\nimport { ChessQueen } from \"./ChessQueen\";\nimport { ChessBishop } from \"./ChessBishop\";\nimport { ChessRook } from \"./ChessRook\";\nimport { ChessKing } from \"./ChessKing\";\nimport { ChessKnight } from \"./ChessKnight\";\nimport { ChessPiece } from \"./ChessPiece\";\nimport { PieceMovement } from \"./PieceMovement\";\n\n\n\nexport class ChessBoard {\n    board:ChessKing[][] | null[][] = [\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n    ]\n    isWhiteTurnToPlay = false\n    pieceHash: {[id:number]:ChessPiece} = {}\n    history:PieceMovement[] = []\n    private initiated = false;\n    constructor(dummy=false) {\n        if(this.initiated || dummy) return\n    \n        this.init()\n        this.initiated = true;\n\n    }\n    init() {\n       \n        const blackKing = new ChessKing(this, 0, 3,false);\n        this.board[0][3] = blackKing\n\n        this.board[0][0] = new ChessRook(this, 0, 0,false);\n        this.board[0][7] = new ChessRook(this, 0, 7,false);\n\n        this.board[0][1] = new ChessKnight(this, 0, 1,false);\n        this.board[0][6] = new ChessKnight(this, 0, 6,false);\n\n        this.board[0][4] = new ChessQueen(this, 0, 4,false);\n        this.board[0][2] = new ChessBishop(this, 0, 2,false);\n        this.board[0][5] = new ChessBishop(this, 0, 5,false);\n\n        this.board[1][0] = new ChessPawn(this, 1, 0,false);\n        this.board[1][1] = new ChessPawn(this, 1, 1,false);\n        this.board[1][2] = new ChessPawn(this, 1, 2,false);\n        this.board[1][3] = new ChessPawn(this, 1, 3,false);\n        this.board[1][4] = new ChessPawn(this, 1, 4,false);\n        this.board[1][5] = new ChessPawn(this, 1, 5,false);\n        this.board[1][6] = new ChessPawn(this, 1, 6,false);\n        this.board[1][7] = new ChessPawn(this, 1, 7,false)\n\n\n\n\n        const whiteKing = new ChessKing(this, 7, 3,true);\n        this.board[7][3] = whiteKing\n        this.board[7][0] = new ChessRook(this, 7, 0,true);\n        this.board[7][7] = new ChessRook(this, 7, 7,true);\n        this.board[7][1] = new ChessKnight(this, 7, 1,true);\n        this.board[7][6] = new ChessKnight(this, 7, 6,true);\n        this.board[7][4] = new ChessQueen(this, 7, 4,true);\n        this.board[7][2] = new ChessBishop(this, 7, 2,true);\n        this.board[7][5] = new ChessBishop(this, 7, 5,true);\n\n        this.board[6][0] = new ChessPawn(this, 6, 0,true);\n        this.board[6][1] = new ChessPawn(this, 6, 1,true);\n        this.board[6][2] = new ChessPawn(this, 6, 2,true);\n        this.board[6][3] = new ChessPawn(this, 6, 3,true);\n        this.board[6][4] = new ChessPawn(this, 6, 4,true);\n        this.board[6][5] = new ChessPawn(this, 6, 5,true);\n        this.board[6][6] = new ChessPawn(this, 6, 6,true);\n        this.board[6][7] = new ChessPawn(this, 6, 7,true);\n\n\n\n       \n        \n        // set the aims for all pieces, whom they should protect and whom they should all attack\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell) {\n                    this.pieceHash[cell.id] = cell;\n                    if (cell.isPieceWhite) { // if its my piece\n\n                        cell.king = whiteKing;\n                        cell.oppKing = blackKing;\n                    } else {\n                        cell.oppKing = whiteKing;\n                        cell.king = blackKing;\n                    }\n\n                }\n\n            }\n        }\n\n      \n    }\n\n    toString() {\n        return JSON.stringify(this.board.map(r => r.map(_ => _ ? `${_.id}-${_.name}` : 'null')));\n    }\n\n}\n\n\n\n\n","import { useEffect, useRef, useState } from \"react\";\nimport { ChessPiece } from \"../engine/ChessPiece\";\n\nfunction Bar({pieceWidth,horizontal}) {\n    const arr = horizontal ? ChessPiece.availableXMovements: ChessPiece.availableYMovements;\nreturn (\n\n\n                <div className={horizontal ?'Bar-X': ''} >\n                    {arr.map((c, x) => {\n                        return (<div key={x} className={horizontal ?'Bar-X': 'Board-X'} style={{ width: pieceWidth + 'px', height: pieceWidth + 'px', }}>\n                            {c}\n                        </div>)\n                    })}\n                </div>\n)\n    \n}\n\nexport default Bar;\n","import { useEffect, useRef, useState } from \"react\";\nimport { ChessBoard } from \"./engine/ChessBoard\";\nimport './Chess.css';\nimport { ChessPiece } from \"./engine/ChessPiece\";\nimport Bar from \"./misc/Bar\";\nimport { devLog } from '../env'\nimport { PieceMovement } from \"./engine/PieceMovement\";\nimport { csvGenerator } from \"../misc/functions\";\n\nfunction f() {\n    return Math.min(window.innerHeight, window.innerWidth) - 150\n}\n\n\nfunction ChessGame() {\n    const [size, setSize] = useState({\n        boardWidth: f(),\n        pieceWidth: (f()) / 8\n    })\n    const [board, setBoard] = useState([] as ChessPiece[][] | null[][])\n    const [movementHistory, setMovementHistory] = useState([] as PieceMovement[])\n    const [availableMoves, setAvailableMoves] = useState({} as { [id: string]: boolean })\n    const [selectedPiece, setSelectedPiece] = useState(null as ChessPiece | null)\n\n    const chessBoardRef = useRef(null as any as ChessBoard);\n\n    const [isWhiteTurnToPlay, setIsWhiteTurnToPlay] = useState(true);\n\n\n    function reloadBoard() {\n        chessBoardRef.current.isWhiteTurnToPlay = !chessBoardRef.current.isWhiteTurnToPlay\n        setBoard(chessBoardRef.current.board)\n        setMovementHistory(chessBoardRef.current.history)\n        setAvailableMoves({});\n        setSelectedPiece(null);\n        setIsWhiteTurnToPlay(chessBoardRef.current.isWhiteTurnToPlay)\n    }\n    function init() {\n        chessBoardRef.current = new ChessBoard();\n\n        reloadBoard()\n    }\n\n\n    useEffect(() => {\n        init()\n        const cb = () => {\n            const boardWidth = f()\n            const pieceWidth = boardWidth / 8;\n\n            setSize(\n                {\n                    boardWidth,\n                    pieceWidth\n                }\n            )\n\n        }\n        window.addEventListener('resize', cb)\n        return () => {\n            window.removeEventListener('resize', cb)\n        }\n\n\n    }, [])\n\n    function onPieceClick(piece: ChessPiece | null, y: number, x: number) {\n        if (availableMoves[y + \",\" + x]) {\n            if (!selectedPiece?.move(y, x)) {\n                // invalid move\n                return;\n            }\n\n            reloadBoard()\n\n\n\n\n        } else if (piece) {\n            devLog(piece.toString())\n            if (isWhiteTurnToPlay !== piece.isPieceWhite) {\n                setAvailableMoves({});\n                setSelectedPiece(null);\n                return;\n            }\n\n\n            // show available moves\n            const a = piece.availableMoves();\n\n            const _: { [id: string]: boolean } = {}\n            a.forEach(m => {\n\n                _[m.positionYIndex + \",\" + m.positionXIndex] = true\n            });\n\n            setAvailableMoves(_);\n            setSelectedPiece(piece);\n\n        } else {\n            setAvailableMoves({});\n            setSelectedPiece(null);\n        }\n\n    }\n\n    return (\n        <div className=\"Whole-Body\">\n\n            <div className=\"Chess-Field\">\n                <div className=\"Chess-Pre-Playable\">\n                    <Bar pieceWidth={size.pieceWidth} horizontal />\n                    <div className=\"Chess-Playable\">\n                        <Bar pieceWidth={size.pieceWidth} horizontal={false} />\n                        <div className='Board' style={{ width: size.boardWidth + 'px', height: size.boardWidth + 'px' }} >\n\n                            {board.map((row: ChessPiece[] | null[], y: number) => {\n\n                                return (<div key={y} className='Board-Y' style={{ display: 'flex' }}>\n\n\n\n                                    {row.map((piece: ChessPiece | null, x: number) => {\n\n                                        const shouldHighlight = availableMoves[y + \",\" + x];\n                                        return (<div onClick={() => onPieceClick(piece, y, x)} key={x} className='Board-X' style={{ width: size.pieceWidth + 'px', height: size.pieceWidth + 'px', backgroundColor: (x % 2 === 0) === (y % 2 === 0) ? 'rgba(245, 222, 179, 0.596)' : '' }}>\n                                            <div className={!piece ? '' : (isWhiteTurnToPlay !== piece.isPieceWhite) ? 'Piece-inner-invalid' : 'Piece-inner-valid'} style={{ width: '70%', height: '70%', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: !(shouldHighlight || piece && piece === selectedPiece) ? '' : 'rgba(255, 255, 0, 0.5)' }}>\n                                                {piece ? <i className={piece.icon} style={{ color: (piece.isPieceWhite ? \"white\" : \"black\") }} ></i> : ''}\n\n                                            </div>\n                                        </div>\n\n\n                                        )\n                                    })}\n\n\n\n                                </div>\n\n\n                                )\n                            })}\n                        </div>\n                        <Bar pieceWidth={size.pieceWidth} horizontal={false} />\n                    </div>\n                    <Bar pieceWidth={size.pieceWidth} horizontal />\n\n                </div>\n                <div className='Side' style={{ padding: '10px' }} >\n                    <div className='' style={{ padding: '0 30px' }} >\n                        Piece To Play\n                        <br />\n                        <i className={'fa fa-chess '} style={{ color: isWhiteTurnToPlay ? 'white' : 'black' }} ></i>\n                        <hr />\n                        <div style={{ textAlign: 'center' }}>\n                            {movementHistory.length != 0 && <>\n                                <button onClick={() => { csvGenerator(movementHistory) }}>Export</button>\n                                <br />\n                            </>}\n                            {movementHistory.map((movement, key) => {\n\n                                return (\n                                    <div style={{ fontSize: '13px', marginBottom: '5px', display: 'flex', justifyContent: 'center' }} key={key}>\n                                        <div style={{ marginRight: '5px' }}>\n                                            <i className={movement.icon} style={{ color: movement.isPieceWhite ? 'white' : 'black' }} />\n                                        </div>\n                                        <div>\n                                            {movement.prevPosition} <i className=\"fa fa-arrow-right\" /> {movement.position}\n                                        </div>\n                                    </div>\n                                )\n\n                            })}\n                        </div>\n                    </div> </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ChessGame;\n","import { PieceMovement } from \"../chess/engine/PieceMovement\";\n\nexport const safeObjectAssessor = (...args) => {\n    let base = args[0];\n\n    for (let i = 1; i < args.length; i++) {\n        if (!base) return false;\n        base = base[args[i]];\n    }\n\n    return true;\n\n}\nexport const csvGenerator = (data: PieceMovement[]) => {\n\n    let csvContent = \"data:text/csv;charset=utf-8,\";\n\n    data.forEach(function (obj: PieceMovement) {\n        let row = obj.toCSV().join(\",\");\n        csvContent += row + \"\\r\\n\";\n    });\n    var encodedUri = encodeURI(csvContent);\n    var link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"my_data.csv\");\n    document.body.appendChild(link); // Required for FF\n\n    link.click();\n}\n","import logo from './logo.svg';\nimport { BrowserRouter, Link, Redirect, Route, Router, Switch } from 'react-router-dom'\nimport ChessGame from './chess';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n\n\n        <Route path=\"/chess\" component={ChessGame} />\n\n\n        <Redirect path=\"/\" to=\"chess\" />\n\n\n\n      </Switch>\n\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}