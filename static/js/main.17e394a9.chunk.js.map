{"version":3,"sources":["chess/engine/ChessPiece.ts","chess/engine/ChessQueen.ts","chess/engine/ChessPawn.ts","chess/engine/ChessBishop.ts","chess/engine/ChessRook.ts","chess/engine/ChessKing.ts","chess/engine/ChessKnight.ts","chess/engine/ChessBoard.ts","chess/misc/Bar.tsx","chess/index.tsx","env.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChessPiece","board","positionYIndex","positionXIndex","isPieceWhite","name","icon","successfulMovements","id","Math","random","king","oppKing","anticipateOppMoves","_","i","length","j","cellPiece","availableMoves","forEach","m","anticipateMyMoves","cell","this","undefined","yIndex","xIndex","cb","canmove","movements","temp","previousPositionYIndex","previousPositionXIndex","alert","type","position","availableXMovements","availableYMovements","ChessQueen","indexes","analyzeAndBreak","incY","incX","possiblePiece","push","max","map","index","positionY","positionX","ChessPawn","_parent","prototype","move","apply","queen","incY1","incY2","ChessBishop","ChessRook","ChessKing","curr","ChessKnight","ChessBoard","blackKing","whiteKing","JSON","stringify","r","Bar","pieceWidth","horizontal","arr","className","c","x","style","width","height","boardWidth","min","window","innerHeight","innerWidth","ChessGame","useState","setBoard","setAvailableMoves","selectedPiece","setSelectedPiece","chessBoard","useRef","current","isWhiteTurnToPlay","setIsWhiteTurnToPlay","reloadBoard","onPieceClick","piece","y","o","toString","console","error","a","useEffect","row","display","shouldHighlight","onClick","backgroundColor","justifyContent","alignItems","color","padding","App","basename","process","path","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17e394a9.chunk.js","sourcesContent":["import { ChessKing } from \"./ChessKing\";\n\nexport abstract class ChessPiece {\n    name = 'piece'\n    icon = 'chess'\n    static availableXMovements = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    static availableYMovements = ['8', '7', '6', '5', '4', '3', '2', '1'];\n\n    positionXIndex = 0;\n    positionYIndex = 0;\n    isPieceWhite = true;\n    successfulMovements = 0;\n\n    board: ChessPiece[][] |  null[][] = [[]]\n    id = (1 + Math.random()) * 100000000;\n\n    king:ChessKing | null = null;\n    oppKing:ChessKing | null = null;\n\n    constructor(\n        board: ChessPiece[][] |  null[][],\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean\n    ) {\n        this.board = board;\n        this.isPieceWhite = isPieceWhite === undefined ? positionYIndex > 2 : isPieceWhite;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n\n    }\n\n    anticipateOppMoves = () => {\n        const _:{[id:string]:boolean} = {}\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cellPiece = this.board[i][j];\n                if (cellPiece && cellPiece.isPieceWhite !== this.isPieceWhite) {\n                    cellPiece.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n    anticipateMyMoves = () => {\n        const _ = {}\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell && cell.isPieceWhite === this.isPieceWhite) {\n                    cell.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n\n    move(yIndex:number, xIndex:number, cb?: () => void) {\n        const availableMoves = this.availableMoves();\n        let canmove = false;\n        availableMoves.forEach(movements => {\n\n            if (movements.positionYIndex === yIndex && movements.positionXIndex === xIndex) {\n                canmove = true;\n            }\n        })\n\n        if (!canmove) {\n            return false;\n        }\n        // swap pos in board;\n        const temp = this.board[this.positionYIndex][this.positionXIndex]\n\n\n\n        this.board[this.positionYIndex][this.positionXIndex] = null;\n\n        const previousPositionYIndex = this.positionYIndex;\n        const previousPositionXIndex = this.positionXIndex;\n        this.positionYIndex = yIndex;\n        this.positionXIndex = xIndex;\n\n        // assign new pos\n        this.board[this.positionYIndex][this.positionXIndex] = temp;\n        // test to see if the move puts the king at risk\n        const oppMoves = this.anticipateOppMoves();\n        if (oppMoves[this.king?.positionYIndex + ',' + this.king?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('king at risk')\n\n            this.board[this.positionYIndex][this.positionXIndex] = null;\n\n            this.positionYIndex = previousPositionYIndex;\n            this.positionXIndex = previousPositionXIndex;\n\n            this.board[previousPositionYIndex][previousPositionXIndex] = temp;\n\n\n            return false;\n        }\n        const myMoves = this.anticipateMyMoves();\n        if (myMoves[this.oppKing?.positionYIndex + ',' + this.oppKing?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('check')\n\n\n\n        }\n\n        if (cb) {\n            cb()\n        }\n\n        this.successfulMovements++;\n        return true;\n\n\n    }\n    availableMoves = () => {\n        return [] as {\n            positionYIndex: number;\n            positionY: string;\n            positionXIndex: number;\n            positionX: string;\n        }[]\n    \n}\n\n    toString() {\n        return {\n            name:this.name,\n            type :this.isPieceWhite ? 'White' : 'Black',\n            position:`${ChessPiece.availableXMovements[this.positionXIndex]}${ChessPiece.availableYMovements[this.positionYIndex]}`\n        }\n;\n    }\n    currentPosition() {\n        return `Y = ${this.positionYIndex}, X = ${this.positionXIndex}`\n    }\n\n\n}\n","import { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessQueen extends ChessPiece {\n    name = 'queen'\n    icon = 'fas fa-chess-queen'\n    constructor(\n        board:ChessPiece[][] |  null[][],\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean\n        ) {\n        super(board,positionYIndex, positionXIndex,isPieceWhite);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex + i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex -i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex - i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i <= this.positionYIndex; i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex + i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessQueen } from \"./ChessQueen\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessPawn extends ChessPiece {\n    name = 'pawn'\n    icon = 'fas fa-chess-pawn'\n    _parent = ChessPiece.prototype\n     constructor(\n        board:ChessPiece[][] |  null[][],\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean\n        ) {\n        super(board, positionYIndex, positionXIndex, isPieceWhite);\n    }\n\n    move = (yIndex:number, xIndex:number) => {\n\n        return this._parent.move.apply(this, [yIndex, xIndex, () => {\n            // check if its promotable\n\n            if (this.isPieceWhite && yIndex === 0 || !this.isPieceWhite && yIndex === 7) {\n                // promote\n                const queen = new ChessQueen(this.board, yIndex, this.positionXIndex, this.isPieceWhite);\n                queen.king = this.king;\n                queen.oppKing = this.oppKing;\n                this.board[this.positionYIndex][this.positionXIndex] = queen;\n            }\n\n\n        }])\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n        const incY1 = !this.isPieceWhite ? 1 : -1;\n        const incY2 = !this.isPieceWhite ? 2 : -2;\n\n\n\n\n        // check if it can move a step in y axes and if its own piece isnt on its moves\n\n\n        if (this.positionYIndex + incY1 < ChessPiece.availableXMovements.length && this.positionYIndex + incY1 >= 0 && !this.board[this.positionYIndex + incY1][this.positionXIndex]) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex })\n\n            if (this.successfulMovements === 0) {\n                // check if its first time, only move if theres nothing in the way\n\n                if (this.positionYIndex + incY2 < ChessPiece.availableYMovements.length && this.positionYIndex + incY2 >= 0 && !this.board[this.positionYIndex + incY2][this.positionXIndex]) {\n                    indexes.push({ positionYIndex: this.positionYIndex + incY2, positionXIndex: this.positionXIndex })\n\n                }\n            }\n\n\n\n        }\n\n\n\n    \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length && this.positionYIndex + incY1 >= 0  && this.board[this.positionYIndex + incY1][this.positionXIndex + 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex + 1 })\n            // check diagonal if an opp is there\n        }\n \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length  && this.board[this.positionYIndex + incY1][this.positionXIndex - 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex - 1 })\n            // check diagonal if an opp is there\n        }\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessBishop extends ChessPiece {\n    name = 'bishop'\n    icon = 'fas fa-chess-bishop'\n     constructor(\n        board:ChessPiece[][] |  null[][],\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean\n        ) {\n        super(board, positionYIndex, positionXIndex, isPieceWhite);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY, incX) => {\n            if (incY < 0 || incY > 7 || incX < 0 || incX > 7) return true;\n            const possiblePiece = this.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n\n        // do diagonal \n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex + i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex - i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex - i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i <= Math.max(this.positionYIndex,this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex + i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessRook extends ChessPiece {\n    name = 'rook'\n    icon = 'fas fa-chess-rook'\n    constructor(\n        board:ChessPiece[][] |  null[][],\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean\n        ) {\n        super(board,positionYIndex, positionXIndex,isPieceWhite);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKing extends ChessPiece {\n    name = 'king'\n    icon = 'fas fa-chess-king'\n    constructor(\n        board:ChessPiece[][] |  null[][],\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean\n        ) {\n        super(board,positionYIndex, positionXIndex,isPieceWhite);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [1,0],\n            [0,1],\n            [-1,0],\n            [0,-1],\n\n            [1,1],\n            [-1,-1],\n            [-1,1],\n            [1,-1],\n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKnight extends ChessPiece {\n    name = 'knight'\n    icon = 'fas fa-chess-knight'\n     constructor(\n        board:ChessPiece[][] |  null[][],\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean\n        ) {\n        super(board,positionYIndex, positionXIndex,isPieceWhite);\n    }\n\n\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n   \n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n           \n          \n           \n            const possiblePiece = this.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n             //   return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [2,1],\n            [2,-1],\n            [-2,1],\n            [-2,-1],\n            [1,2],\n            [1,-2],\n            [-1,2],\n            [-1,-2],\n      \n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n\n}\n","import { ChessPawn } from \"./ChessPawn\";\nimport { ChessQueen } from \"./ChessQueen\";\nimport { ChessBishop } from \"./ChessBishop\";\nimport { ChessRook } from \"./ChessRook\";\nimport { ChessKing } from \"./ChessKing\";\nimport { ChessKnight } from \"./ChessKnight\";\n\n\n\nexport class ChessBoard {\n    board:ChessKing[][] | null[][] = [\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n    ]\n\n    constructor() {\n        const blackKing = new ChessKing(this.board, 0, 3,false);\n        this.board[0][3] = blackKing\n\n        this.board[0][0] = new ChessRook(this.board, 0, 0,false);\n        this.board[0][7] = new ChessRook(this.board, 0, 7,false);\n\n        this.board[0][1] = new ChessKnight(this.board, 0, 1,false);\n        this.board[0][6] = new ChessKnight(this.board, 0, 6,false);\n\n        this.board[0][4] = new ChessQueen(this.board, 0, 4,false);\n        this.board[0][2] = new ChessBishop(this.board, 0, 2,false);\n        this.board[0][5] = new ChessBishop(this.board, 0, 5,false);\n\n        this.board[1][0] = new ChessPawn(this.board, 1, 0,false);\n        this.board[1][1] = new ChessPawn(this.board, 1, 1,false);\n        this.board[1][2] = new ChessPawn(this.board, 1, 2,false);\n        this.board[1][3] = new ChessPawn(this.board, 1, 3,false);\n        this.board[1][4] = new ChessPawn(this.board, 1, 4,false);\n        this.board[1][5] = new ChessPawn(this.board, 1, 5,false);\n        this.board[1][6] = new ChessPawn(this.board, 1, 6,false);\n        this.board[1][7] = new ChessPawn(this.board, 1, 7,false)\n\n\n\n\n        const whiteKing = new ChessKing(this.board, 7, 3,true);\n        this.board[7][3] = whiteKing\n        this.board[7][0] = new ChessRook(this.board, 7, 0,true);\n        this.board[7][7] = new ChessRook(this.board, 7, 7,true);\n        this.board[7][1] = new ChessKnight(this.board, 7, 1,true);\n        this.board[7][6] = new ChessKnight(this.board, 7, 6,true);\n        this.board[7][4] = new ChessQueen(this.board, 7, 4,true);\n        this.board[7][2] = new ChessBishop(this.board, 7, 2,true);\n        this.board[7][5] = new ChessBishop(this.board, 7, 5,true);\n\n        this.board[6][0] = new ChessPawn(this.board, 6, 0,true);\n        this.board[6][1] = new ChessPawn(this.board, 6, 1,true);\n        this.board[6][2] = new ChessPawn(this.board, 6, 2,true);\n        this.board[6][3] = new ChessPawn(this.board, 6, 3,true);\n        this.board[6][4] = new ChessPawn(this.board, 6, 4,true);\n        this.board[6][5] = new ChessPawn(this.board, 6, 5,true);\n        this.board[6][6] = new ChessPawn(this.board, 6, 6,true);\n        this.board[6][7] = new ChessPawn(this.board, 6, 7,true);\n\n\n\n       \n        \n        // set the aims for all pieces, whom they should protect and whom they should all attack\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell) {\n                    if (cell.isPieceWhite) { // if its my piece\n\n                        cell.king = whiteKing;\n                        cell.oppKing = blackKing;\n                    } else {\n                        cell.oppKing = whiteKing;\n                        cell.king = blackKing;\n                    }\n\n                }\n\n            }\n        }\n    }\n\n    toString() {\n        return JSON.stringify(this.board.map(r => r.map(_ => _ ? `${_.name}` : 'null')));\n    }\n\n}\n\n\n\n\n","import { useEffect, useRef, useState } from \"react\";\nimport { ChessPiece } from \"../engine/ChessPiece\";\n\nfunction Bar({pieceWidth,horizontal}) {\n    const arr = horizontal ? ChessPiece.availableXMovements: ChessPiece.availableYMovements;\nreturn (\n\n\n                <div className={horizontal ?'Bar-X': ''} >\n                    {arr.map((c, x) => {\n                        return (<div key={x} className={horizontal ?'Bar-X': 'Board-X'} style={{ width: pieceWidth + 'px', height: pieceWidth + 'px', }}>\n                            {c}\n                        </div>)\n                    })}\n                </div>\n)\n    \n}\n\nexport default Bar;\n","import { useEffect, useRef, useState } from \"react\";\nimport { ChessBoard } from \"./engine/ChessBoard\";\nimport './Chess.css';\nimport { ChessPiece } from \"./engine/ChessPiece\";\nimport Bar from \"./misc/Bar\";\nimport { devLog } from '../env'\n\n\nconst boardWidth = Math.min(window.innerHeight, window.innerWidth) - 150\nconst pieceWidth = boardWidth / 8;\n\nfunction ChessGame() {\n\n    const [board, setBoard] = useState([] as ChessPiece[][] | null[][])\n    const [availableMoves, setAvailableMoves] = useState({} as { [id: string]: boolean })\n    const [selectedPiece, setSelectedPiece] = useState(null as ChessPiece | null)\n\n    const chessBoardRef = useRef(new ChessBoard());\n    const chessBoard = chessBoardRef.current;\n    const [isWhiteTurnToPlay, setIsWhiteTurnToPlay] = useState(true);\n\n\n    function reloadBoard() {\n        setBoard(chessBoard.board)\n\n        setAvailableMoves({});\n        setSelectedPiece(null);\n    }\n\n\n    useEffect(() => {\n\n        reloadBoard()\n\n\n    }, [])\n\n    function onPieceClick(piece: ChessPiece | null, y: number, x: number) {\n        if (availableMoves[y + \",\" + x]) {\n            if (!selectedPiece?.move(y, x)) {\n                // invalid move\n                return;\n            }\n\n            reloadBoard()\n\n            setIsWhiteTurnToPlay(!isWhiteTurnToPlay)\n\n\n        } else if (piece) {\n            devLog(piece.toString())\n            if (isWhiteTurnToPlay !== piece.isPieceWhite) {\n                setAvailableMoves({});\n                setSelectedPiece(null);\n                return;\n            }\n\n\n            // show available moves\n            const a = piece.availableMoves();\n\n            const _: { [id: string]: boolean } = {}\n            a.forEach(m => {\n\n                _[m.positionYIndex + \",\" + m.positionXIndex] = true\n            });\n\n            setAvailableMoves(_);\n            setSelectedPiece(piece);\n\n        } else {\n            setAvailableMoves({});\n            setSelectedPiece(null);\n        }\n\n    }\n\n    return (\n        <div className=\"Whole-Body\">\n            <div className=\"Chess-Field\">\n                <div className=\"Chess-Pre-Playable\">\n                    <Bar pieceWidth={pieceWidth} horizontal />\n                    <div className=\"Chess-Playable\">\n                        <Bar pieceWidth={pieceWidth} horizontal={false} />\n                        <div className='Board' style={{ width: boardWidth + 'px', height: boardWidth + 'px' }} >\n\n                            {board.map((row: ChessPiece[] | null[], y: number) => {\n\n                                return (<div key={y} className='Board-Y' style={{ display: 'flex' }}>\n\n\n\n                                    {row.map((piece: ChessPiece | null, x: number) => {\n\n                                        const shouldHighlight = availableMoves[y + \",\" + x];\n                                        return (<div onClick={() => onPieceClick(piece, y, x)} key={x} className='Board-X' style={{ width: pieceWidth + 'px', height: pieceWidth + 'px', backgroundColor: (x % 2 === 0) === (y % 2 === 0) ? 'rgba(245, 222, 179, 0.596)' : '' }}>\n                                            <div className={!piece ? '' : (isWhiteTurnToPlay !== piece.isPieceWhite) ? 'Piece-inner-invalid' : 'Piece-inner-valid'} style={{ width: '70%', height: '70%', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: !(shouldHighlight || piece && piece === selectedPiece) ? '' : 'rgba(255, 255, 0, 0.5)' }}>\n                                                {piece ? <i className={piece.icon} style={{ color: (piece.isPieceWhite ? \"white\" : \"black\") }} ></i> : ''}\n\n                                            </div>\n                                        </div>\n\n\n                                        )\n                                    })}\n\n\n\n                                </div>\n\n\n                                )\n                            })}\n                        </div>\n                        <Bar pieceWidth={pieceWidth} horizontal={false} />\n                    </div>\n                    <Bar pieceWidth={pieceWidth} horizontal />\n\n                </div>\n                <div className='Side' style={{ padding: '20px' }} >\n                    Piece To Play\n                    <br />\n                    <i className={'fa fa-chess '} style={{ color: isWhiteTurnToPlay ? 'white' : 'black' }} ></i>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ChessGame;\n","export const LOGGING = true;\nexport const devLog = (o)=> {\n    if(!LOGGING) return;\n    console.error(o)\n\n}","import logo from './logo.svg';\nimport { BrowserRouter, Link, Redirect, Route, Router, Switch } from 'react-router-dom'\nimport ChessGame from './chess';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n\n\n        <Route path=\"/chess\" component={ChessGame} />\n\n\n        <Redirect path=\"/\" to=\"chess\" />\n\n\n\n      </Switch>\n\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}