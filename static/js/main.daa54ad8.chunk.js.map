{"version":3,"sources":["chess/engine/PieceMovement.ts","chess/engine/ChessPiece.ts","chess/engine/ChessQueen.ts","chess/engine/ChessPawn.ts","chess/engine/ChessBishop.ts","chess/engine/ChessRook.ts","chess/engine/ChessKing.ts","chess/engine/ChessKnight.ts","chess/engine/ChessBoard.ts","chess/misc/Bar.tsx","env.ts","misc/functions.ts","misc/data.ts","misc/StateProvider.tsx","chess/index.tsx","Home.tsx","checkers/engine/PieceMovement.ts","checkers/engine/CheckerPiece.ts","checkers/engine/CheckerQueen.ts","checkers/engine/CheckerPawn.ts","checkers/misc/index.ts","checkers/engine/CheckerBoard.ts","checkers/index.tsx","misc/Navbar.tsx","StolenIn60Seconds/misc/types.ts","StolenIn60Seconds/misc/utils/Subscription.ts","StolenIn60Seconds/misc/utils/index.ts","StolenIn60Seconds/misc/models/Item.ts","StolenIn60Seconds/misc/models/Wall.ts","StolenIn60Seconds/misc/models/Circle.ts","StolenIn60Seconds/misc/models/ImageItem.ts","StolenIn60Seconds/misc/models/Gate.ts","StolenIn60Seconds/misc/scenes/Scene1.ts","StolenIn60Seconds/misc/draw.ts","StolenIn60Seconds/BottomPanel.tsx","StolenIn60Seconds/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PieceMovement","piece","prevPositionYIndex","prevPositionXIndex","positionYIndex","positionXIndex","id","name","icon","isPieceWhite","prevPosition","position","this","ChessPiece","availableXMovements","availableYMovements","el","chessBoard","ghostId","successfulMovements","ChessBoard","king","oppKing","anticipateOppMoves","_","i","board","length","j","cellPiece","availableMoves","forEach","m","anticipateMyMoves","cell","undefined","globalId","yIndex","xIndex","cb","movement","pieceHash","canmove","movements","temp","previousPositionYIndex","previousPositionXIndex","alert","addToMovement","type","ChessQueen","indexes","analyzeAndBreak","incY","incX","possiblePiece","push","Math","max","map","index","positionY","positionX","ChessPawn","_parent","prototype","move","apply","queen","incY1","incY2","ChessBishop","ChessRook","ChessKing","curr","ChessKnight","dummy","isWhiteTurnToPlay","killedHash","movementIndex","initiated","init","blackKing","whiteKing","JSON","stringify","r","n","getMovements","unshift","slice","Bar","pieceWidth","horizontal","arr","className","c","x","style","width","height","LOGGING","process","production","csvGenerator","data","csvContent","obj","row","toCSV","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","NAVS","to","img","f","min","window","innerHeight","innerWidth","StateContext","createContext","StateProvider","children","useState","showNav","setShowNav","optionsClicked","setOptionsClicked","time","states","stageProps","setStageProps","Provider","value","ChessGame","boardWidth","size","setSize","setBoard","movementHistory","setMovementHistory","setAvailableMoves","selectedPiece","setSelectedPiece","chessBoardRef","useRef","setIsWhiteTurnToPlay","canUndo","canRedo","setUndoAndRedo","useContext","reloadBoard","current","onPieceClick","y","o","toString","console","warn","a","useEffect","addEventListener","removeEventListener","display","shouldHighlight","onClick","backgroundColor","justifyContent","alignItems","color","performUndo","performRedo","padding","textAlign","key","fontSize","marginBottom","marginRight","Home","boundWidth","setBoundWidth","elem","querySelector","rect","getBoundingClientRect","nav","verticalAlign","background","backgroundSize","visibility","jumpPosition","CheckerPiece","CheckerBoard","clone","serialize","s","p","CheckerQueen","preArr","log","inBound","addToHash","hash","preventDFS","val","n1","n2","n3","n4","Object","values","CheckerPawn","checkerPieceDeSerialize","newBoard","newCheckerBoard","pos","deSerialize","str","checkerBoard","parse","_board","_movements","_movementIndex","_isWhiteTurnToPlay","_killedHash","_piece","CheckersGame","checkerBoardRef","localStorage","setItem","getItem","NavBar","Direction","history","useHistory","location","pathname","goBack","cursor","src","alt","float","Subscription","fns","emit","fn","subscribe","gridToPosition","gridX","gridY","positionToGrid","keyboardObs","stageObs","Item","ctx","state","grid","dimensions","noOfLines","boundaries","draw","all","getStyle","debug","cordinates","getBoundaries","each","boundary","fillText","highlight","beginPath","strokeStyle","strokeRect","calculateBoundaries","Wall","fill","lines","diff","_width","widthWithPosition","heightWithPosition","moveTo","lineTo","stroke","_height","updateGrid","HWall","VWall","Circle","action","goTo","prevGrid","res","reject","accept","down","up","right","left","prev","arc","PI","fillStyle","ImageItem","Image","image","drawImage","onload","Flower","HCar","Gate","HGate","VGate","Scene1","canvas","canvasContainer","generateGrid","scene","player","stack","vertical","keyCb","validate","direction","isVertical","isHorizontal","increments","playerPosition","generateScenes","_moveFrame","frameX","frameY","distWidth","clientWidth","distHeight","clientHeight","previousInStack","frame","scroll","scrollTop","total","scrollHeight","pop","scrollLeft","scrollWidth","moveFrame","e","valid","event","keyCode","clearRect","car","drawLines","totalDrawn","group","lineWidth","drawGrid","globalCompositeOperation","fillRect","TimePill","props","floor","seconds","borderRadius","fontWeight","Controls","BottomPanel","bottom","zIndex","StolenIn60SecondsGame","canvasRef","canvasContainerRef","getContext","ref","App","basename","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.daa54ad8.chunk.js","sourcesContent":["import { ChessBoard } from \"./ChessBoard\";\nimport { ChessKing } from \"./ChessKing\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class PieceMovement {\n    id: number;\n    name: string;\n    icon: string;\n    isPieceWhite: boolean\n\n    prevPositionYIndex: number;\n    prevPositionXIndex: number;\n    prevPosition: string;\n    positionYIndex: number;\n    positionXIndex: number;\n    position: string;\n\n    constructor(\n        piece: ChessPiece,\n        prevPositionYIndex: number,\n        prevPositionXIndex: number,\n        positionYIndex: number,\n        positionXIndex: number,\n\n    ) {\n\n        this.id = piece.id;\n        this.name = piece.name;\n        this.icon = piece.icon;\n        this.isPieceWhite = piece.isPieceWhite;\n        this.prevPositionYIndex = prevPositionYIndex;\n        this.prevPositionXIndex = prevPositionXIndex;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n        this.prevPosition = `${ChessPiece.availableXMovements[this.prevPositionXIndex]}${ChessPiece.availableYMovements[this.prevPositionYIndex]}`\n        this.position = `${ChessPiece.availableXMovements[this.positionXIndex]}${ChessPiece.availableYMovements[this.positionYIndex]}`\n\n    }\n    toJSON() {\n        return [\n            this.id,\n            this.name,\n            this.icon,\n            this.isPieceWhite,\n            this.prevPositionYIndex,\n            this.prevPositionXIndex,\n            this.positionYIndex,\n            this.positionXIndex,\n            this.prevPosition,\n            this.position,\n\n        ]\n\n    }\n    toCSV() {\n        return [\n            // this.id,\n            this.name,\n            this.isPieceWhite?'white':'black',\n            // this.prevPositionYIndex,\n            // this.prevPositionXIndex,\n            // this.positionYIndex,\n            // this.positionXIndex,\n            this.prevPosition,\n            this.position,\n\n        ]\n\n    }\n    fromJSON(el:any []){\n        this.id = el[0]\n        this.name = el[1]\n        this.icon = el[2]\n        this.isPieceWhite = el[3]\n        this.prevPositionYIndex = el[4]\n        this.prevPositionXIndex = el[5]\n        this.positionYIndex = el[6]\n        this.positionXIndex = el[7]\n        this.prevPosition = el[8]\n        this.position = el[9]\n\n    }\n\n\n\n}\n","import { devLog } from \"../../env\";\nimport { ChessBoard } from \"./ChessBoard\";\nimport { ChessKing } from \"./ChessKing\";\nimport { PieceMovement } from \"./PieceMovement\";\n\nexport abstract class ChessPiece {\n    name = 'piece'\n    icon = 'chess'\n    static availableXMovements = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    static availableYMovements = ['8', '7', '6', '5', '4', '3', '2', '1'];\n\n    positionXIndex = 0;\n    positionYIndex = 0;\n    isPieceWhite = true;\n    successfulMovements = 0;\n\n    chessBoard: ChessBoard = new ChessBoard(true);\n    static globalId = 0\n    id = 0\n\n    king: ChessKing | null = null;\n    oppKing: ChessKing | null = null;\n\n    constructor(\n        chessBoard: ChessBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean,\n        ghostId?: number\n    ) {\n        if (ghostId == undefined) {\n            ChessPiece.globalId++;\n            this.id = ChessPiece.globalId;\n        } else {\n            this.id = ghostId\n        }\n\n\n\n        this.chessBoard = chessBoard;\n        this.isPieceWhite = isPieceWhite;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n\n    }\n\n    anticipateOppMoves = () => {\n        const _: { [id: string]: boolean } = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cellPiece = this.chessBoard.board[i][j];\n                if (cellPiece && cellPiece.isPieceWhite !== this.isPieceWhite) {\n                    cellPiece.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n    anticipateMyMoves = () => {\n        const _ = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cell = this.chessBoard.board[i][j];\n                if (cell && cell.isPieceWhite === this.isPieceWhite) {\n                    cell.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n\n    move(yIndex: number, xIndex: number, cb?: () => void) {\n        const movement = new PieceMovement(this.chessBoard.pieceHash[this.id], this.positionYIndex, this.positionXIndex, yIndex, xIndex);\n        const availableMoves = this.availableMoves();\n        let canmove = false;\n        availableMoves.forEach(movements => {\n\n            if (movements.positionYIndex === yIndex && movements.positionXIndex === xIndex) {\n                canmove = true;\n            }\n        })\n\n        if (!canmove) {\n            return false;\n        }\n        // swap pos in board;\n        const temp = this.chessBoard.board[this.positionYIndex][this.positionXIndex]\n\n\n\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n        const previousPositionYIndex = this.positionYIndex;\n        const previousPositionXIndex = this.positionXIndex;\n        this.positionYIndex = yIndex;\n        this.positionXIndex = xIndex;\n\n        // assign new pos\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = temp;\n        // test to see if the move puts the king at risk\n        const oppMoves = this.anticipateOppMoves();\n        if (oppMoves[this.king?.positionYIndex + ',' + this.king?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('king at risk')\n\n            this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n            this.positionYIndex = previousPositionYIndex;\n            this.positionXIndex = previousPositionXIndex;\n\n            this.chessBoard.board[previousPositionYIndex][previousPositionXIndex] = temp;\n\n\n            return false;\n        }\n        const myMoves = this.anticipateMyMoves();\n        if (myMoves[this.oppKing?.positionYIndex + ',' + this.oppKing?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('check')\n\n\n\n        }\n\n        if (cb) {\n            cb()\n        }\n\n        this.successfulMovements++;\n        this.chessBoard.addToMovement(movement);\n        //devLog(movement)\n        return true;\n\n\n    }\n    availableMoves = () => {\n        return [] as {\n            positionYIndex: number;\n            positionY: string;\n            positionXIndex: number;\n            positionX: string;\n        }[]\n\n    }\n\n    toString() {\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.isPieceWhite ? 'White' : 'Black',\n            position: `${ChessPiece.availableXMovements[this.positionXIndex]}${ChessPiece.availableYMovements[this.positionYIndex]}`\n        }\n            ;\n    }\n    currentPosition() {\n        return `Y = ${this.positionYIndex}, X = ${this.positionXIndex}`\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessQueen extends ChessPiece {\n    name = 'queen'\n    icon = 'fas fa-chess-queen'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex + i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex -i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex - i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i <= this.positionYIndex; i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex + i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessQueen } from \"./ChessQueen\";\nimport { ChessPiece } from \"./ChessPiece\";\nimport { ChessBoard } from \"./ChessBoard\";\n\nexport class ChessPawn extends ChessPiece {\n    name = 'pawn'\n    icon = 'fas fa-chess-pawn'\n    _parent = ChessPiece.prototype\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite,ghostId);\n    }\n\n    move = (yIndex:number, xIndex:number) => {\n\n        return this._parent.move.apply(this, [yIndex, xIndex, () => {\n            // check if its promotable\n            if (this.isPieceWhite && yIndex === 0 || !this.isPieceWhite && yIndex === 7) {\n                // promote\n                const queen = new ChessQueen(this.chessBoard, yIndex, this.positionXIndex, this.isPieceWhite,this.id);\n                queen.king = this.king;\n                queen.oppKing = this.oppKing;\n                this.chessBoard.board[this.positionYIndex][this.positionXIndex] = queen;\n            }\n\n\n        }])\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n        }[] = [];\n        const incY1 = !this.isPieceWhite ? 1 : -1;\n        const incY2 = !this.isPieceWhite ? 2 : -2;\n\n\n\n\n        // check if it can move a step in y axes and if its own piece isnt on its moves\n        if (this.positionYIndex + incY1 < ChessPiece.availableXMovements.length && this.positionYIndex + incY1 >= 0 && !this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex]) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex })\n\n            if (this.successfulMovements === 0) {\n                // check if its first time, only move if theres nothing in the way\n\n                if (this.positionYIndex + incY2 < ChessPiece.availableYMovements.length && this.positionYIndex + incY2 >= 0 && !this.chessBoard.board[this.positionYIndex + incY2][this.positionXIndex]) {\n                    indexes.push({ positionYIndex: this.positionYIndex + incY2, positionXIndex: this.positionXIndex })\n\n                }\n            }\n\n\n\n        }\n\n\n\n    \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length && this.positionYIndex + incY1 >= 0  && this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex + 1] &&this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex + 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex + 1 })\n            // check diagonal if an opp is there\n        }\n \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length  && this.positionYIndex + incY1 >= 0 && this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex - 1] &&this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex - 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex - 1 })\n            // check diagonal if an opp is there\n        }\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessBishop extends ChessPiece {\n    name = 'bishop'\n    icon = 'fas fa-chess-bishop'\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY, incX) => {\n            if (incY < 0 || incY > 7 || incX < 0 || incX > 7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n\n        // do diagonal \n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex + i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex - i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex - i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i <= Math.max(this.positionYIndex,this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex + i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessRook extends ChessPiece {\n    name = 'rook'\n    icon = 'fas fa-chess-rook'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKing extends ChessPiece {\n    name = 'king'\n    icon = 'fas fa-chess-king'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n           \n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n      \n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [1,0],\n            [0,1],\n            [-1,0],\n            [0,-1],\n\n            [1,1],\n            [-1,-1],\n            [-1,1],\n            [1,-1],\n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKnight extends ChessPiece {\n    name = 'knight'\n    icon = 'fas fa-chess-knight'\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n\n    }\n\n\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n   \n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n           \n          \n           \n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n             //   return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [2,1],\n            [2,-1],\n            [-2,1],\n            [-2,-1],\n            [1,2],\n            [1,-2],\n            [-1,2],\n            [-1,-2],\n      \n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n\n}\n","import { ChessPawn } from \"./ChessPawn\";\nimport { ChessQueen } from \"./ChessQueen\";\nimport { ChessBishop } from \"./ChessBishop\";\nimport { ChessRook } from \"./ChessRook\";\nimport { ChessKing } from \"./ChessKing\";\nimport { ChessKnight } from \"./ChessKnight\";\nimport { ChessPiece } from \"./ChessPiece\";\nimport { PieceMovement } from \"./PieceMovement\";\n\n\n\nexport class ChessBoard {\n    board: ChessKing[][] | null[][] = [\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n    ]\n    isWhiteTurnToPlay = false\n    pieceHash: { [id: number]: ChessPiece } = {}\n    killedHash: { [str: string]: ChessPiece | null } = {}\n    private movements: PieceMovement[] = []\n    movementIndex = 0\n    private initiated = false;\n    constructor(dummy = false) {\n        if (this.initiated || dummy) return\n\n        this.init()\n        this.initiated = true;\n\n    }\n    init() {\n\n        const blackKing = new ChessKing(this, 0, 3, false);\n        this.board[0][3] = blackKing\n\n        this.board[0][0] = new ChessRook(this, 0, 0, false);\n        this.board[0][7] = new ChessRook(this, 0, 7, false);\n\n        this.board[0][1] = new ChessKnight(this, 0, 1, false);\n        this.board[0][6] = new ChessKnight(this, 0, 6, false);\n\n        this.board[0][4] = new ChessQueen(this, 0, 4, false);\n        this.board[0][2] = new ChessBishop(this, 0, 2, false);\n        this.board[0][5] = new ChessBishop(this, 0, 5, false);\n\n        this.board[1][0] = new ChessPawn(this, 1, 0, false);\n        this.board[1][1] = new ChessPawn(this, 1, 1, false);\n        this.board[1][2] = new ChessPawn(this, 1, 2, false);\n        this.board[1][3] = new ChessPawn(this, 1, 3, false);\n        this.board[1][4] = new ChessPawn(this, 1, 4, false);\n        this.board[1][5] = new ChessPawn(this, 1, 5, false);\n        this.board[1][6] = new ChessPawn(this, 1, 6, false);\n        this.board[1][7] = new ChessPawn(this, 1, 7, false)\n\n\n\n\n        const whiteKing = new ChessKing(this, 7, 3, true);\n        this.board[7][3] = whiteKing\n        this.board[7][0] = new ChessRook(this, 7, 0, true);\n        this.board[7][7] = new ChessRook(this, 7, 7, true);\n        this.board[7][1] = new ChessKnight(this, 7, 1, true);\n        this.board[7][6] = new ChessKnight(this, 7, 6, true);\n        this.board[7][4] = new ChessQueen(this, 7, 4, true);\n        this.board[7][2] = new ChessBishop(this, 7, 2, true);\n        this.board[7][5] = new ChessBishop(this, 7, 5, true);\n\n        this.board[6][0] = new ChessPawn(this, 6, 0, true);\n        this.board[6][1] = new ChessPawn(this, 6, 1, true);\n        this.board[6][2] = new ChessPawn(this, 6, 2, true);\n        this.board[6][3] = new ChessPawn(this, 6, 3, true);\n        this.board[6][4] = new ChessPawn(this, 6, 4, true);\n        this.board[6][5] = new ChessPawn(this, 6, 5, true);\n        this.board[6][6] = new ChessPawn(this, 6, 6, true);\n        this.board[6][7] = new ChessPawn(this, 6, 7, true);\n\n\n\n\n\n        // set the aims for all pieces, whom they should protect and whom they should all attack\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell) {\n                    this.pieceHash[cell.id] = cell;\n                    if (cell.isPieceWhite) { // if its my piece\n\n                        cell.king = whiteKing;\n                        cell.oppKing = blackKing;\n                    } else {\n                        cell.oppKing = whiteKing;\n                        cell.king = blackKing;\n                    }\n\n                }\n\n            }\n        }\n\n\n    }\n\n    toString() {\n        return JSON.stringify(this.board.map(r => r.map(_ => _ ? `${_.id}-${_.name}` : 'null')));\n    }\n    canUndo() {\n        return (this.movementIndex < this.movements.length)\n    }\n    canRedo() {\n        return (this.movementIndex - 1 >= 0)\n    }\n    performUndo() {\n\n        const movement = this.movements[this.movementIndex]\n        const piece = this.board[movement.positionYIndex][movement.positionXIndex];\n\n        if (!piece) return;\n\n        piece.positionYIndex = movement.prevPositionYIndex;\n        piece.positionXIndex = movement.prevPositionXIndex;\n\n\n        this.board[movement.prevPositionYIndex][movement.prevPositionXIndex] = piece;\n\n        this.board[movement.positionYIndex][movement.positionXIndex] = this.killedHash[movement.positionYIndex + ',' + movement.positionXIndex];\n\n        this.movementIndex++;\n    }\n\n    performRedo() {\n        this.movementIndex--;\n\n        const movement = this.movements[this.movementIndex]\n        const piece = this.board[movement.prevPositionYIndex][movement.prevPositionXIndex];\n        if (!piece) return;\n\n\n        piece.positionYIndex = movement.positionYIndex;\n        piece.positionXIndex = movement.positionXIndex;\n\n        this.board[movement.positionYIndex][movement.positionXIndex] = piece;\n\n        this.board[movement.prevPositionYIndex][movement.prevPositionXIndex] = null;\n\n    }\n    addToMovement(movement: PieceMovement) {\n        const n = this.getMovements();\n        n.unshift(movement);\n        this.movements = n;\n        this.movementIndex = 0;\n\n    }\n    getMovements() {\n        return this.movements.slice(this.movementIndex);\n    }\n\n}\n\n\n\n\n","import { useEffect, useRef, useState } from \"react\";\nimport { ChessPiece } from \"../engine/ChessPiece\";\n\nfunction Bar({pieceWidth,horizontal}) {\n    const arr = horizontal ? ChessPiece.availableXMovements: ChessPiece.availableYMovements;\nreturn (\n\n\n                <div className={horizontal ?'Bar-X': ''} >\n                    {arr.map((c, x) => {\n                        return (<div key={x} className={horizontal ?'Bar-X': 'Board-X'} style={{ width: pieceWidth + 'px', height: pieceWidth + 'px', }}>\n                            {c}\n                        </div>)\n                    })}\n                </div>\n)\n    \n}\n\nexport default Bar;\n","export const LOGGING = true && !process.env.production;\nexport const devLog = (o)=> {\n    if(!LOGGING) return;\n    console.warn(o)\n\n}","import { PieceMovement } from \"../chess/engine/PieceMovement\";\n\nexport const safeObjectAssessor = (...args) => {\n    let base = args[0];\n\n    for (let i = 1; i < args.length; i++) {\n        if (!base) return false;\n        base = base[args[i]];\n    }\n\n    return true;\n\n}\nexport const csvGenerator = (data: PieceMovement[]) => {\n\n    let csvContent = \"data:text/csv;charset=utf-8,\";\n\n    data.forEach(function (obj: PieceMovement) {\n        let row = obj.toCSV().join(\",\");\n        csvContent += row + \"\\r\\n\";\n    });\n    var encodedUri = encodeURI(csvContent);\n    var link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"my_data.csv\");\n    document.body.appendChild(link); // Required for FF\n\n    link.click();\n}\n","\nexport const NAVS = [\n    {\n        to:'/chess',\n        name:'Chess',\n        img:process.env.PUBLIC_URL + '/assets/chess-banner.png'\n    },\n    {\n        to:'/checkers',\n        name:'Checkers',\n        img:process.env.PUBLIC_URL + '/assets/checkers-banner.png'\n    },    {\n        to:'/stolen-in-60-seconds',\n        name:'Stolen in 60 seconds',\n        img:process.env.PUBLIC_URL + '/assets/ss60-banner.png'\n    }\n]\n\nexport interface HashIndex {\n    [id: string]: {\n        positionYIndex: number\n        positionXIndex: number\n        jumpPosition?: number[][]\n        id: 0\n\n\n    }\n}\n\nexport function f() {\n    return Math.min(window.innerHeight, window.innerWidth)  - (150 + (window.innerWidth > 700 ? 100 : 0))\n}","import React, { FC, useState, createContext } from 'react';\n\ninterface StateContext  {\n    showNav: boolean;\n    setShowNav: (value: (((prevState: boolean) => boolean) | boolean)) => void;\n    optionsClicked: boolean;\n    setOptionsClicked: (value: (((prevState: boolean) => boolean) | boolean)) => void;\n    stageProps: {\n        time: number\n    },\n    setStageProps: React.Dispatch<React.SetStateAction<{time: number}>>\n};\n\n\nexport const StateContext = createContext<StateContext>(\n    {} as StateContext\n);\n\nexport const StateProvider = ({ children }: any) => {\n    const [showNav, setShowNav] = useState(true);\n    const [optionsClicked, setOptionsClicked] = useState(false);\n    const [stageProps, setStageProps] = useState({time:0});\n\n    const states = {\n        showNav, setShowNav,optionsClicked, setOptionsClicked,stageProps, setStageProps\n    }\n\n    return (\n        <StateContext.Provider value={states}>\n            {children}\n        </StateContext.Provider>\n    );\n};\n","import {useContext, useEffect, useRef, useState} from \"react\";\nimport { ChessBoard } from \"./engine/ChessBoard\";\nimport './Chess.css';\nimport { ChessPiece } from \"./engine/ChessPiece\";\nimport Bar from \"./misc/Bar\";\nimport { devLog } from '../env'\nimport { PieceMovement } from \"./engine/PieceMovement\";\nimport { csvGenerator } from \"../misc/functions\";\nimport { f } from \"../misc/data\";\nimport {StateContext} from \"../misc/StateProvider\";\n\n\n\nfunction ChessGame() {\n    const [size, setSize] = useState({\n        boardWidth: f(),\n        pieceWidth: (f()) / 8\n    })\n    const [board, setBoard] = useState([] as ChessPiece[][] | null[][])\n    const [movementHistory, setMovementHistory] = useState([] as PieceMovement[])\n    const [availableMoves, setAvailableMoves] = useState({} as { [id: string]: boolean })\n    const [selectedPiece, setSelectedPiece] = useState(null as ChessPiece | null)\n\n    const chessBoardRef = useRef(null as any as ChessBoard);\n\n    const [isWhiteTurnToPlay, setIsWhiteTurnToPlay] = useState(true);\n    const [{ canUndo, canRedo }, setUndoAndRedo] = useState({ canUndo: false, canRedo: false });\n\n    const {showNav, setShowNav} = useContext(StateContext)\n\n    function reloadBoard() {\n        chessBoardRef.current.isWhiteTurnToPlay = !chessBoardRef.current.isWhiteTurnToPlay\n        setBoard(chessBoardRef.current.board)\n        setMovementHistory(chessBoardRef.current.getMovements())\n        setAvailableMoves({});\n        setSelectedPiece(null);\n        setIsWhiteTurnToPlay(chessBoardRef.current.isWhiteTurnToPlay)\n        setUndoAndRedo({ canRedo: chessBoardRef.current.canRedo(), canUndo: chessBoardRef.current.canUndo() })\n    }\n    function init() {\n        chessBoardRef.current = new ChessBoard();\n\n        reloadBoard()\n    }\n\n\n    useEffect(() => {\n        setShowNav(false)\n        init()\n        const cb = () => {\n            const boardWidth = f()\n            const pieceWidth = boardWidth / 8;\n\n            setSize(\n                {\n                    boardWidth,\n                    pieceWidth\n                }\n            )\n\n        }\n        window.addEventListener('resize', cb)\n        return () => {\n            window.removeEventListener('resize', cb)\n        }\n\n\n    }, [])\n\n    function onPieceClick(piece: ChessPiece | null, y: number, x: number) {\n        if (availableMoves[y + \",\" + x]) {\n            if (!selectedPiece?.move(y, x)) {\n                // invalid move\n                return;\n            }\n\n            reloadBoard()\n\n\n\n\n        } else if (piece) {\n            devLog(piece.toString())\n            if (isWhiteTurnToPlay !== piece.isPieceWhite) {\n                setAvailableMoves({});\n                setSelectedPiece(null);\n                return;\n            }\n\n\n            // show available moves\n            const a = piece.availableMoves();\n\n            const _: { [id: string]: boolean } = {}\n            a.forEach(m => {\n\n                _[m.positionYIndex + \",\" + m.positionXIndex] = true\n            });\n\n            setAvailableMoves(_);\n            setSelectedPiece(piece);\n\n        } else {\n            setAvailableMoves({});\n            setSelectedPiece(null);\n        }\n\n    }\n    function performRedo() {\n        chessBoardRef.current.performRedo();\n        reloadBoard()\n    }\n    function performUndo() {\n        chessBoardRef.current.performUndo();\n        reloadBoard()\n    }\n\n    return (\n        <div className=\"Whole-Body\">\n\n            <div className=\"Chess-Field\">\n                <div className=\"Chess-Pre-Playable\">\n                    <Bar pieceWidth={size.pieceWidth} horizontal />\n                    <div className=\"Chess-Playable\">\n                        <Bar pieceWidth={size.pieceWidth} horizontal={false} />\n                        <div className='Board' style={{ width: size.boardWidth + 'px', height: size.boardWidth + 'px' }} >\n\n                            {board.map((row: ChessPiece[] | null[], y: number) => {\n\n                                return (<div key={y} className='Board-Y' style={{ display: 'flex' }}>\n\n\n\n                                    {row.map((piece: ChessPiece | null, x: number) => {\n\n                                        const shouldHighlight = availableMoves[y + \",\" + x];\n                                        return (<div onClick={() => onPieceClick(piece, y, x)} key={x} className='Board-X' style={{ width: size.pieceWidth + 'px', height: size.pieceWidth + 'px', backgroundColor: (x % 2 === 0) === (y % 2 === 0) ? 'rgba(245, 222, 179, 0.596)' : '' }}>\n                                            <div className={!piece ? '' : (isWhiteTurnToPlay !== piece.isPieceWhite) ? 'Piece-inner-invalid' : 'Piece-inner-valid'} style={{ width: '70%', height: '70%', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: !(shouldHighlight || piece && piece === selectedPiece) ? '' : 'rgba(255, 255, 0, 0.5)' }}>\n                                                {piece ? <i className={piece.icon} style={{ color: (piece.isPieceWhite ? \"white\" : \"black\") }} ></i> : ''}\n\n                                            </div>\n                                        </div>\n\n\n                                        )\n                                    })}\n\n\n\n                                </div>\n\n\n                                )\n                            })}\n                        </div>\n                        <Bar pieceWidth={size.pieceWidth} horizontal={false} />\n                    </div>\n                    <Bar pieceWidth={size.pieceWidth} horizontal />\n                    <div className=\"text-center\">\n                        {canUndo && <button onClick={performUndo} className=\"m-2\">  <i className=\"fa fa-undo\" /></button>}\n                        {canRedo && <button onClick={performRedo} className=\"m-2\">  <i className=\"fa fa-redo\" /></button>}\n\n\n                    </div>\n                </div>\n              \n                <div className='Side' style={{ padding: '10px' }} >\n                    <div className='' style={{ padding: '0 30px' }} >\n                        Piece To Play\n                        <br />\n                        <i className={'fa fa-chess '} style={{ color: isWhiteTurnToPlay ? 'white' : 'black' }} ></i>\n                        <hr />\n                        <div style={{ textAlign: 'center' }}>\n                            {movementHistory.length != 0 && <>\n                                <button onClick={() => { csvGenerator(movementHistory) }}><i className=\"fa fa-file-download\" /></button>\n                                <br />\n                            </>}\n                            {movementHistory.map((movement, key) => {\n\n                                return (\n                                    <div style={{ fontSize: '13px', marginBottom: '5px', display: 'flex', justifyContent: 'center' }} key={key}>\n                                        <div style={{ marginRight: '5px' }}>\n                                            <i className={movement.icon} style={{ color: movement.isPieceWhite ? 'white' : 'black' }} />\n                                        </div>\n                                        <div>\n                                            {movement.prevPosition} <i className=\"fa fa-arrow-right\" /> {movement.position}\n                                        </div>\n                                    </div>\n                                )\n\n                            })}\n                        </div>\n                    </div> </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ChessGame;\n","import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport { NAVS } from './misc/data';\nimport './index';\n\nfunction Home() {\n  const [boundWidth, setBoundWidth] = useState(0);\n\n  useEffect(() => {\n    const elem = document.querySelector('#bound');\n\n    var rect = elem?.getBoundingClientRect();\n\n    setBoundWidth(rect?.width || 0);\n\n\n  }, [])\n  return (\n    <div className='container'>\n      <div className='row'>\n\n        {NAVS.map((nav, i) => {\n          return (\n            <div id=\"bound\" className='col-6 col-md-4 col-lg-3 mb-2'>\n\n              <Link\n                className='d-block border rounded  text-center bound-inner'\n                key={i}\n                to={nav.to}\n                style={{\n                  height: (boundWidth - 24) + 'px',\n                  verticalAlign:'bottom',\n                  background: `url('${nav.img}')`,\n                  backgroundSize:'cover'\n\n                }}\n              >\n                <div style={{visibility:'hidden'}}>{nav.name}</div>\n                <div className='bound-content p-1 bg-primary rounded text-white'>\n                  {nav.name}\n                </div>\n\n\n              </Link>\n\n\n            </div>\n          )\n\n        })}\n\n\n      </div>\n    </div>\n\n  );\n}\n\nexport default Home;\n","\nimport { CheckerPiece } from \"./CheckerPiece\";\n\nexport class PieceMovement {\n    id: number;\n    name: string;\n    icon: string;\n    isPieceWhite: boolean\n\n    prevPositionYIndex: number;\n    prevPositionXIndex: number;\n    prevPosition: string;\n    positionYIndex: number;\n    positionXIndex: number;\n    position: string;\n    jumpPosition: number[][]\n\n    constructor(\n        id: number,\n        name:string,\n        icon:string,\n        isPieceWhite:boolean,\n        prevPositionYIndex: number,\n        prevPositionXIndex: number,\n        positionYIndex: number,\n        positionXIndex: number,\n        jumpPosition: number[][] = []\n\n    ) {\n\n        this.id = id;\n        this.name = name;\n        this.icon = icon;\n        this.isPieceWhite = isPieceWhite;\n        this.prevPositionYIndex = prevPositionYIndex;\n        this.prevPositionXIndex = prevPositionXIndex;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n        this.prevPosition = `${CheckerPiece.availableXMovements[this.prevPositionXIndex]}${CheckerPiece.availableYMovements[this.prevPositionYIndex]}`\n        this.position = `${CheckerPiece.availableXMovements[this.positionXIndex]}${CheckerPiece.availableYMovements[this.positionYIndex]}`\n        this.jumpPosition = jumpPosition\n    }\n    toJSON() {\n        return [\n            this.id,\n            this.name,\n            this.icon,\n            this.isPieceWhite,\n            this.prevPositionYIndex,\n            this.prevPositionXIndex,\n            this.positionYIndex,\n            this.positionXIndex,\n            this.prevPosition,\n            this.position,\n            this.jumpPosition\n        ]\n\n    }\n    toCSV() {\n        return [\n            // this.id,\n            this.name,\n            this.isPieceWhite ? 'white' : 'black',\n            // this.prevPositionYIndex,\n            // this.prevPositionXIndex,\n            // this.positionYIndex,\n            // this.positionXIndex,\n            this.prevPosition,\n            this.position,\n\n        ]\n\n    }\n    fromJSON(el: any[]) {\n        this.id = el[0]\n        this.name = el[1]\n        this.icon = el[2]\n        this.isPieceWhite = el[3]\n        this.prevPositionYIndex = el[4]\n        this.prevPositionXIndex = el[5]\n        this.positionYIndex = el[6]\n        this.positionXIndex = el[7]\n        this.prevPosition = el[8]\n        this.position = el[9]\n        this.jumpPosition = el[10]\n\n    }\n    serialize(){\n        return [\n            this.id,\n            this.name,\n            this.icon,\n            this.isPieceWhite,\n            this.prevPositionYIndex,\n            this.prevPositionXIndex,\n            this.positionYIndex,\n            this.positionXIndex,\n            this.jumpPosition\n        ]\n    }\n\n\n\n}\n","import { devLog } from \"../../env\";\nimport { CheckerBoard } from \"./CheckerBoard\";\nimport { CheckerPawn } from \"./CheckerPawn\";\nimport { CheckerQueen } from \"./CheckerQueen\";\n\nimport { PieceMovement } from \"./PieceMovement\";\n\nexport abstract class CheckerPiece {\n    name = 'piece'\n    icon = 'chess'\n    static availableXMovements = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    static availableYMovements = ['8', '7', '6', '5', '4', '3', '2', '1'];\n\n    positionXIndex = 0;\n    positionYIndex = 0;\n    isPieceWhite = true;\n    successfulMovements = 0;\n\n    chessBoard: CheckerBoard = new CheckerBoard(true);\n    static globalId = 0\n    id = 0\n\n\n\n    constructor(\n        chessBoard: CheckerBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean,\n        ghostId?: number\n    ) {\n        if (ghostId == undefined) {\n            CheckerPiece.globalId++;\n            this.id = CheckerPiece.globalId;\n        } else {\n            this.id = ghostId\n        }\n\n\n\n        this.chessBoard = chessBoard;\n        this.isPieceWhite = isPieceWhite;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n\n    }\n\n    anticipateOppMoves = () => {\n        const _: { [id: string]: boolean } = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cellPiece = this.chessBoard.board[i][j];\n                if (cellPiece && cellPiece.isPieceWhite !== this.isPieceWhite) {\n                    cellPiece.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n    anticipateMyMoves = () => {\n        const _ = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cell = this.chessBoard.board[i][j];\n                if (cell && cell.isPieceWhite === this.isPieceWhite) {\n                    cell.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n\n    move(yIndex: number, xIndex: number, cb?: () => void) {\n        const availableMoves = this.availableMoves();\n        let canmove = false;\n        let jumpPosition: undefined | number[][] = undefined;\n        availableMoves.forEach(movements => {\n\n            if (movements.positionYIndex === yIndex && movements.positionXIndex === xIndex) {\n                canmove = true\n                jumpPosition = movements.jumpPosition;\n            }\n        })\n        const p = this.chessBoard.pieceHash[this.id];\n        const movement = new PieceMovement(p.id,p.name,p.icon,p.isPieceWhite, this.positionYIndex, this.positionXIndex, yIndex, xIndex, jumpPosition);\n\n        if (!canmove) {\n            return false;\n        }\n\n        // swap pos in board;\n        const temp = this.chessBoard.board[this.positionYIndex][this.positionXIndex]\n\n\n\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n        const previousPositionYIndex = this.positionYIndex;\n        const previousPositionXIndex = this.positionXIndex;\n        this.positionYIndex = yIndex;\n        this.positionXIndex = xIndex;\n\n        // assign new pos\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = temp;\n        // test to see if the move puts the king at risk\n\n\n        if (cb) {\n            cb()\n        }\n\n        this.successfulMovements++;\n        this.chessBoard.addToMovement(movement);\n        //devLog(movement)\n        return true;\n\n\n    }\n    availableMoves = () => {\n        return [] as {\n            positionYIndex: number;\n            positionY: string;\n            positionXIndex: number;\n            positionX: string;\n            jumpPosition?: number[][]\n        }[]\n\n    }\n\n\n    toString() {\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.isPieceWhite ? 'White' : 'Black',\n            position: `${CheckerPiece.availableXMovements[this.positionXIndex]}${CheckerPiece.availableYMovements[this.positionYIndex]}`\n        }\n            ;\n    }\n    currentPosition() {\n        return `Y = ${this.positionYIndex}, X = ${this.positionXIndex}`\n    }\n    clone = (): CheckerPiece => {\n        return null as any as CheckerPiece;\n    }\n    serialize = (toString = false) => {\n        const s = [\n            this.id,\n            this.name,\n            this.icon,\n            this.positionYIndex,\n            this.positionXIndex,\n            this.isPieceWhite,\n            this.successfulMovements,\n        ]\n        return toString ? JSON.stringify(s) : s;\n    }\n \n\n\n\n}\n","import { threadId } from \"worker_threads\";\nimport { HashIndex } from \"../../misc/data\";\nimport { CheckerBoard } from \"./CheckerBoard\";\nimport { CheckerPiece } from \"./CheckerPiece\";\n\n\n\nexport class CheckerQueen extends CheckerPiece {\n    name = 'queen'\n    icon = 'fas fa-chess-queen'\n    constructor(\n        chessBoard: CheckerBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean, ghostId?: number\n    ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite, ghostId);\n    }\n\n    availableMoves = (indexes: HashIndex = {}, id = 0, positionYIndex = this.positionYIndex, positionXIndex = this.positionXIndex, preArr = []) => {\n\n        if (id == 1) {\n            console.log({ positionYIndex, positionXIndex })\n        }\n\n\n        const inBound = (i) => i >= 0 && i <= 7\n        const addToHash = (hash, preventDFS?) => {\n            hash.id = id;\n            const key = hash.positionYIndex + ',' + hash.positionXIndex;\n            const val = indexes[key];\n            if ((val && id !== val.id) || key == this.positionYIndex + ',' + this.positionXIndex) return;\n            if (!val) {\n                indexes[key] = hash;\n\n            } else if (!val.jumpPosition || (hash.jumpPosition || []).length > val.jumpPosition.length) {\n                indexes[key] = hash;\n            } else {\n                //console.error(key,indexes)\n\n\n            }\n            if(preventDFS) return;\n            this.availableMoves(indexes, id + 1, hash.positionYIndex, hash.positionXIndex, hash.jumpPosition || [])\n\n        }\n\n        const analyzeAndBreak = (incY: number, incX: number, i: number, j: number, value: number[][] = []) => {\n\n\n            if (!inBound(incY) || !inBound(incX)) return true;\n\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                if (id != 0) return true;\n                addToHash({ positionYIndex: incY, positionXIndex: incX },true)\n\n\n\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else if (possiblePiece.isPieceWhite !== this.isPieceWhite && inBound(incY + i) && inBound(incX + j) && this.chessBoard.board[incY + i][incX + j] != null && this.chessBoard.board[incY + i][incX + j]?.isPieceWhite != this.isPieceWhite) {\n\n                return true;\n\n            }\n            else if (possiblePiece.isPieceWhite !== this.isPieceWhite && inBound(incY + i) && inBound(incX + j) && this.chessBoard.board[incY + i][incX + j] == null) {\n                // its not the same color and its possible to jump\n\n                value.push([incY, incX]);\n                addToHash({\n                    positionYIndex: incY + i,\n                    positionXIndex: incX + j,\n                    jumpPosition: [...value]\n                })\n\n\n\n            }\n\n            return false;\n        }\n\n\n        // do diagonal \n        const n1: number[][] = [...preArr];\n        for (let i = 1; i < (8 - positionYIndex); i++) {\n            const incY = positionYIndex + i;\n            const incX = positionXIndex + i;\n\n            if (analyzeAndBreak(incY, incX, 1, 1, n1)) {\n                break;\n            }\n\n        }\n        const n2: number[][] = [...preArr];\n        for (let i = 1; i < Math.max(positionYIndex, positionXIndex); i++) {\n            const incY = positionYIndex - i;\n            const incX = positionXIndex - i;\n\n\n            if (analyzeAndBreak(incY, incX, -1, -1, n2)) {\n                break;\n            }\n\n        }\n        const n3: number[][] = [...preArr];\n        for (let i = 1; i < (8 - positionYIndex); i++) {\n            const incY = positionYIndex + i;\n            const incX = positionXIndex - i;\n\n            if (analyzeAndBreak(incY, incX, 1, -1, n3)) {\n                break;\n            }\n        }\n        const n4: number[][] = [...preArr];\n        for (let i = 1; i <= positionYIndex; i++) {\n            const incY = positionYIndex - i;\n            const incX = positionXIndex + i\n\n\n            if (analyzeAndBreak(incY, incX, -1, 1, n4)) {\n                break;\n            }\n        }\n\n        return (Object.values(indexes)).map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: CheckerPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: CheckerPiece.availableXMovements[index.positionYIndex],\n                jumpPosition: index.jumpPosition\n\n            }\n        })\n    }\n\n    clone = () => {\n        return new CheckerQueen(this.chessBoard, this.positionYIndex,this.positionXIndex, this.isPieceWhite,this.id)\n    }\n\n\n}\n","import { CheckerQueen } from \"./CheckerQueen\";\nimport { CheckerPiece } from \"./CheckerPiece\";\nimport { CheckerBoard } from \"./CheckerBoard\";\nimport { HashIndex } from \"../../misc/data\";\n\nexport class CheckerPawn extends CheckerPiece {\n    name = 'pawn'\n    icon = 'fas fa-circle'\n    private _parent = CheckerPiece.prototype\n    constructor(\n        chessBoard: CheckerBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean, ghostId?: number\n    ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite, ghostId);\n    }\n\n    move = (yIndex: number, xIndex: number) => {\n\n        return this._parent.move.apply(this, [yIndex, xIndex, () => {\n            // check if its promotable\n            if (this.isPieceWhite && yIndex === 0 || !this.isPieceWhite && yIndex === 7) {\n                // promote\n                const queen = new CheckerQueen(this.chessBoard, yIndex, this.positionXIndex, this.isPieceWhite, this.id);\n\n                this.chessBoard.board[this.positionYIndex][this.positionXIndex] = queen;\n            }\n\n\n        }])\n    }\n\n    availableMoves = (indexes: HashIndex = {}, id = 0, positionYIndex = this.positionYIndex, positionXIndex = this.positionXIndex, preArr = []) => {\n\n        const movements = [\n            [1, 1],\n            [-1, -1],\n            [1, -1],\n            [-1, 1],\n        ]\n\n        const inBound = (i) => i >= 0 && i <= 7\n        const addToHash = (hash, preventDFS?) => {\n            hash.id = id;\n            const key = hash.positionYIndex + ',' + hash.positionXIndex;\n            const val = indexes[key];\n            if ( (val && id !== val.id) || key == this.positionYIndex + ',' + this.positionXIndex) return;\n            if (!val) {\n                indexes[key] = hash;\n\n            } else if (!val.jumpPosition || (hash.jumpPosition || []).length > val.jumpPosition.length) {\n                indexes[key] = hash;\n            } else {\n                //console.error(key,indexes)\n\n\n            }\n            if(preventDFS) return;\n            this.availableMoves(indexes, id + 1, hash.positionYIndex, hash.positionXIndex, hash.jumpPosition || [])\n\n        }\n\n        const analyzeAndBreak = (incY: number, incX: number, i: number, j: number, value: number[][] = []) => {\n\n            if (!inBound(incY) || !inBound(incX)) return true;\n\n\n\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                if (id != 0 || \n                    (this.isPieceWhite && positionYIndex < incY) || // avoid white pawns from going back\n                    (!this.isPieceWhite && positionYIndex > incY // avoid black bawns from going back\n                        )) return true;\n                addToHash({ positionYIndex: incY, positionXIndex: incX },true)\n\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                //   return true\n\n            } else if (possiblePiece.isPieceWhite !== this.isPieceWhite && inBound(incY + i) && inBound(incX + j) && this.chessBoard.board[incY + i][incX + j] == null) {\n                // its not the same color and its possible to jump\n                value.push([incY, incX]);\n\n                addToHash({\n                    positionYIndex: incY + i,\n                    positionXIndex: incX + j,\n                    jumpPosition: value\n                })\n\n\n\n            }\n            return false;\n        }\n\n        const n1: number[][] = [...preArr];\n        movements.forEach(curr => {\n            const incY = positionYIndex + curr[0];\n            const incX = positionXIndex + curr[1];\n\n            // check if it can move a step in y axes and if its own piece isnt on its moves\n            analyzeAndBreak(incY, incX, curr[0], curr[1], n1)\n        })\n\n        return (Object.values(indexes)).map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: CheckerPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: CheckerPiece.availableXMovements[index.positionYIndex],\n                jumpPosition: index.jumpPosition\n            }\n        })\n    }\n    clone = () => {\n        return new CheckerPawn(this.chessBoard, this.positionYIndex,this.positionXIndex, this.isPieceWhite,this.id)\n    }\n\n\n}\n","import { CheckerBoard } from \"../engine/CheckerBoard\";\nimport { CheckerPawn } from \"../engine/CheckerPawn\";\nimport { CheckerQueen } from \"../engine/CheckerQueen\";\n\nexport const checkerPieceDeSerialize = (data:  (string | number | boolean)[], board: CheckerBoard) => {\n     \n    const [\n        id,\n        name,\n        icon,\n        positionYIndex,\n        positionXIndex,\n        isPieceWhite,\n        successfulMovements,\n    ] = data;\n    let piece: CheckerPawn | CheckerQueen | null = null;\n\n    switch (name) {\n        case 'queen':\n\n            piece = new CheckerQueen(board, positionYIndex as number, positionXIndex as number, isPieceWhite as boolean, id as number)\n            break;\n        case 'pawn':\n            piece = new CheckerPawn(board, positionYIndex as number, positionXIndex as number, isPieceWhite as boolean, id as number)\n            break;\n\n        default:\n            return null\n\n    }\n\n    piece.successfulMovements = successfulMovements as number;\n    piece.icon = icon as string;\n\n    return piece;\n}","import { CheckerPiece } from \"./CheckerPiece\";\nimport { CheckerPawn } from \"./CheckerPawn\";\nimport { CheckerQueen } from \"./CheckerQueen\";\n\nimport { PieceMovement } from \"./PieceMovement\";\nimport { checkerPieceDeSerialize } from \"../misc\";\n\n\n\nexport class CheckerBoard {\n    board: CheckerPiece[][] | null[][] = CheckerBoard.newBoard();\n    isWhiteTurnToPlay = false\n    pieceHash: { [id: number]: CheckerPiece } = {}\n    killedHash: { [str: string]: CheckerPiece | null } = {}\n    private movements: PieceMovement[] = [];\n    movementIndex = 0;\n    private initiated = false;\n    constructor(dummy = false) {\n        if (this.initiated || dummy) return\n\n        this.init()\n        this.initiated = true;\n\n    }\n    init() {\n        this.board[0][0] = new CheckerPawn(this, 0, 0, false);\n        this.board[0][2] = new CheckerPawn(this, 0, 2, false);\n        this.board[0][4] = new CheckerPawn(this, 0, 4, false);\n        this.board[0][6] = new CheckerPawn(this, 0, 6, false);\n        this.board[1][1] = new CheckerPawn(this, 1, 1, false);\n        this.board[1][3] = new CheckerPawn(this, 1, 3, false);\n        this.board[1][5] = new CheckerPawn(this, 1, 5, false);\n        this.board[1][7] = new CheckerPawn(this, 1, 7, false)\n        this.board[2][0] = new CheckerPawn(this, 2, 0, false);\n        this.board[2][2] = new CheckerPawn(this, 2, 2, false);\n        this.board[2][4] = new CheckerPawn(this, 2, 4, false);\n        this.board[2][6] = new CheckerPawn(this, 2, 6, false);\n\n\n\n\n        this.board[5][1] = new CheckerPawn(this, 5, 1, true);\n        this.board[5][3] = new CheckerPawn(this, 5, 3, true);\n        this.board[5][5] = new CheckerPawn(this, 5, 5, true);\n        this.board[5][7] = new CheckerPawn(this, 5, 7, true);\n        this.board[6][0] = new CheckerPawn(this, 6, 0, true);\n        this.board[6][2] = new CheckerPawn(this, 6, 2, true);\n        this.board[6][4] = new CheckerPawn(this, 6, 4, true);\n        this.board[6][6] = new CheckerPawn(this, 6, 6, true);\n        this.board[7][1] = new CheckerPawn(this, 7, 1, true);\n        this.board[7][3] = new CheckerPawn(this, 7, 3, true);\n        this.board[7][5] = new CheckerPawn(this, 7, 5, true);\n        this.board[7][7] = new CheckerPawn(this, 7, 7, true);\n\n\n\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell) {\n                    this.pieceHash[cell.id] = cell;\n\n\n                }\n\n            }\n        }\n\n\n    }\n    static newBoard() {\n        return [\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n        ]\n    }\n\n    toString() {\n        return JSON.stringify(this.board.map(r => r.map(_ => _ ? `${_.id}-${_.name}` : 'null')));\n    }\n    clone = () => {\n        const newCheckerBoard = new CheckerBoard(true);\n        newCheckerBoard.isWhiteTurnToPlay = this.isWhiteTurnToPlay\n        newCheckerBoard.pieceHash = this.pieceHash\n        newCheckerBoard.movements = this.movements\n\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell) {\n                    newCheckerBoard.board[i][j] = cell.clone();\n\n\n                }\n\n            }\n        }\n        return newCheckerBoard;\n\n    }\n\n    canUndo() {\n        return (this.movementIndex < this.movements.length)\n    }\n    canRedo() {\n        return (this.movementIndex - 1 >= 0)\n    }\n    performUndo() {\n\n        const movement = this.movements[this.movementIndex]\n        const piece = this.board[movement.positionYIndex][movement.positionXIndex];\n\n        if (!piece) return;\n\n        piece.positionYIndex = movement.prevPositionYIndex;\n        piece.positionXIndex = movement.prevPositionXIndex;\n\n        this.board[movement.positionYIndex][movement.positionXIndex] = null;\n        this.board[movement.prevPositionYIndex][movement.prevPositionXIndex] = piece;\n        movement.jumpPosition.forEach(pos => {\n            this.board[pos[0]][pos[1]] = this.killedHash[pos[0] + ',' + pos[1]];\n        })\n        this.movementIndex++;\n    }\n    performRedo() {\n        this.movementIndex--;\n\n        const movement = this.movements[this.movementIndex]\n        const piece = this.board[movement.prevPositionYIndex][movement.prevPositionXIndex];\n        if (!piece) return;\n        this.board[movement.prevPositionYIndex][movement.prevPositionXIndex] = null;\n\n        piece.positionYIndex = movement.positionYIndex;\n        piece.positionXIndex = movement.positionXIndex;\n\n        this.board[movement.positionYIndex][movement.positionXIndex] = piece;\n        movement.jumpPosition.forEach(pos => {\n            this.board[pos[0]][pos[1]] = null;\n        })\n    }\n    addToMovement(movement: PieceMovement) {\n        const n = this.getMovements();\n        n.unshift(movement);\n        this.movements = n;\n        this.movementIndex = 0;\n\n    }\n    getMovements() {\n        return this.movements.slice(this.movementIndex);\n    }\n\n    serialize = (toString = false) => {\n        const board = this.board.map((row: CheckerPiece[] | null[]) => row.map((piece: CheckerPiece | null) => piece == null ? null : piece.serialize()))\n        const movements = this.movements.map(m => m.serialize());\n        const movementIndex = this.movementIndex;\n        const isWhiteTurnToPlay = this.isWhiteTurnToPlay;\n        const killedHash = Object.values(this.killedHash).map((piece: CheckerPiece | null) => piece ? piece.serialize() : null)\n\n        const data = [board, movements, movementIndex, isWhiteTurnToPlay, killedHash]\n\n\n        return toString ? JSON.stringify(data) : data;\n    }\n    static deSerialize = (str: string) => {\n        const checkerBoard = new CheckerBoard(true);\n        const data: (number | boolean | PieceMovement[] | (string | (string | number | boolean)[])[] | (string | (string | number | boolean)[])[][])[] = JSON.parse(str);\n\n        const [_board, _movements, _movementIndex, _isWhiteTurnToPlay, _killedHash] = data;\n        const board = (_board as (string | (string | number | boolean)[] | null)[][]).map((row) => row.map((_piece) => {\n\n\n            if (_piece == null) return null;\n\n            const piece = checkerPieceDeSerialize(_piece as any, checkerBoard);\n            if (piece == null) return null;\n            checkerBoard.pieceHash[piece.id] = piece\n\n            return piece;\n\n        }))\n        const movements = (_movements as any[][]).map(m => new PieceMovement(m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8]));\n        const movementIndex = _movementIndex as number;\n        const isWhiteTurnToPlay = _isWhiteTurnToPlay as boolean;\n        const killedHash: { [str: string]: CheckerPiece | null } = {};\n\n        (_killedHash as (string | (string | number | boolean)[] | null)[])\n            .forEach((_piece) => {\n\n\n                if (_piece != null) {\n\n                    const piece = checkerPieceDeSerialize(_piece as any, checkerBoard)\n                    if (piece == null) return;\n                    killedHash[piece?.positionYIndex + ',' + piece?.positionXIndex] = piece\n\n                }\n            })\n\n\n        checkerBoard.board = board as any;\n        checkerBoard.movements = movements\n        checkerBoard.movementIndex = movementIndex\n        checkerBoard.isWhiteTurnToPlay = isWhiteTurnToPlay\n        checkerBoard.killedHash = killedHash\n\n        return checkerBoard;\n    }\n}\n\n\n\n\n","import { useEffect, useRef, useState } from \"react\";\nimport { CheckerBoard } from \"./engine/CheckerBoard\";\nimport './Checkers.css';\nimport { CheckerPiece } from \"./engine/CheckerPiece\";\n\nimport { devLog } from '../env'\nimport { PieceMovement } from \"./engine/PieceMovement\";\nimport { csvGenerator } from \"../misc/functions\";\nimport { f } from \"../misc/data\";\n\n\n\n\nfunction CheckersGame() {\n    const [size, setSize] = useState({\n        boardWidth: f(),\n        pieceWidth: (f()) / 8\n    })\n    const [board, setBoard] = useState([] as CheckerPiece[][] | null[][])\n    const [movementHistory, setMovementHistory] = useState([] as PieceMovement[])\n    const [availableMoves, setAvailableMoves] = useState({} as { [id: string]: number[][] })\n    const [selectedPiece, setSelectedPiece] = useState(null as CheckerPiece | null)\n\n    const checkerBoardRef = useRef(null as any as CheckerBoard);\n\n    const [isWhiteTurnToPlay, setIsWhiteTurnToPlay] = useState(true);\n    const [{ canUndo, canRedo }, setUndoAndRedo] = useState({ canUndo: false, canRedo: false });\n\n\n    function reloadBoard() {\n        checkerBoardRef.current.isWhiteTurnToPlay = !checkerBoardRef.current.isWhiteTurnToPlay\n        setBoard(checkerBoardRef.current.board)\n        setMovementHistory(checkerBoardRef.current.getMovements())\n        setAvailableMoves({});\n        setSelectedPiece(null);\n        setIsWhiteTurnToPlay(checkerBoardRef.current.isWhiteTurnToPlay)\n        setUndoAndRedo({ canRedo: checkerBoardRef.current.canRedo(), canUndo: checkerBoardRef.current.canUndo() })\n    }\n    function init() {\n        checkerBoardRef.current = new CheckerBoard();\n\n        reloadBoard()\n    }\n\n\n    useEffect(() => {\n        init()\n        const cb = () => {\n            const boardWidth = f()\n            const pieceWidth = boardWidth / 8;\n\n            setSize(\n                {\n                    boardWidth,\n                    pieceWidth\n                }\n            )\n\n        }\n        window.addEventListener('resize', cb)\n        return () => {\n            window.removeEventListener('resize', cb)\n        }\n\n\n    }, [])\n\n    function onPieceClick(piece: CheckerPiece | null, y: number, x: number) {\n\n        if (availableMoves[y + \",\" + x]) {\n            if (!selectedPiece?.move(y, x)) {\n                // invalid move\n                return;\n            }\n\n            const possibleJump = availableMoves[y + \",\" + x];\n\n\n            possibleJump.forEach(([y, x]) => {\n                checkerBoardRef.current.killedHash[y + ',' + x] = checkerBoardRef.current.board[y][x];\n                checkerBoardRef.current.board[y][x] = null;\n            })\n\n\n\n\n            reloadBoard()\n\n\n\n\n        } else if (piece) {\n            //devLog(piece.toString())\n            if (isWhiteTurnToPlay !== piece.isPieceWhite) {\n                setAvailableMoves({});\n                setSelectedPiece(null);\n                return;\n            }\n\n\n            // show available moves\n            const a = piece.availableMoves();\n            //console.log(a)\n\n            const _: { [id: string]: number[][] } = {}\n            a.forEach(m => {\n                const val = m.jumpPosition == undefined ? [] : m.jumpPosition;\n\n                _[m.positionYIndex + \",\" + m.positionXIndex] = val\n            });\n\n            setAvailableMoves(_);\n            setSelectedPiece(piece);\n\n        } else {\n            setAvailableMoves({});\n            setSelectedPiece(null);\n        }\n\n    }\n    function performRedo() {\n        checkerBoardRef.current.performRedo();\n        reloadBoard()\n    }\n    function performUndo() {\n        checkerBoardRef.current.performUndo();\n        reloadBoard()\n    }\n    function save(){\n        const data = checkerBoardRef.current.serialize(true);\n        // @ts-ignore\n        localStorage.setItem(\"checkers\",data);\n    }\n    function restore(){\n        const data = localStorage.getItem(\"checkers\");\n        if(!data) return;\n        const board = CheckerBoard.deSerialize(data)\n        board.isWhiteTurnToPlay = !board.isWhiteTurnToPlay\n\n        checkerBoardRef.current = board;\n        reloadBoard()\n\n    }\n\n    return (\n        <div className=\"Whole-Body\">\n\n            <div className=\"Chess-Field\">\n                <div className=\"Chess-Pre-Playable\">\n\n                    <div className=\"Chess-Playable\">\n\n                        <div className='Board' style={{ width: size.boardWidth + 'px', height: size.boardWidth + 'px' }} >\n\n                            {board.map((row: CheckerPiece[] | null[], y: number) => {\n\n                                return (<div key={y} className='Board-Y' style={{ display: 'flex' }}>\n\n\n\n                                    {row.map((piece: CheckerPiece | null, x: number) => {\n\n                                        const shouldHighlight = availableMoves[y + \",\" + x];\n                                        return (<div onClick={() => onPieceClick(piece, y, x)} key={x} className='Board-X' style={{ width: size.pieceWidth + 'px', height: size.pieceWidth + 'px', backgroundColor: (x % 2 === 0) === (y % 2 === 0) ? 'rgba(245, 222, 179, 0.596)' : '' }}>\n                                            <div className={!piece ? '' : (isWhiteTurnToPlay !== piece.isPieceWhite) ? 'Piece-inner-invalid' : 'Piece-inner-valid'} style={{ width: '70%', height: '70%', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: !(shouldHighlight || piece && piece === selectedPiece) ? '' : 'rgba(255, 255, 0, 0.5)' }}>\n                                                {piece ? <i className={piece.icon} style={{ color: (piece.isPieceWhite ? \"white\" : \"black\") }} ></i> : ''}\n\n                                            </div>\n                                        </div>\n\n\n                                        )\n                                    })}\n\n\n\n                                </div>\n\n\n                                )\n                            })}\n                        </div>\n\n                    </div>\n\n                    <div className=\"text-center\">\n                        {canUndo && <button onClick={performUndo} className=\"m-2\">  <i className=\"fa fa-undo\" /></button>}\n                        {canRedo && <button onClick={performRedo} className=\"m-2\">  <i className=\"fa fa-redo\" /></button>}\n\n\n                    </div>\n                </div>\n                <div className='Side' style={{ padding: '10px' }} >\n                    <div className='' style={{ padding: '0 30px' }} >\n                        Piece To Play\n                        <br />\n                        <i className={'fa fa-circle '} style={{ color: isWhiteTurnToPlay ? 'white' : 'black' }} ></i>\n                        <hr />\n                        <div style={{ textAlign: 'center' }}>\n                        <button onClick={save}><i className=\"fa fa-save\" /></button>\n                        <button onClick={restore}><i className=\"fa fa-upload\" /></button>\n                            {movementHistory.length != 0 && <>\n                                <button onClick={() => { csvGenerator(movementHistory as any) }}><i className=\"fa fa-file-download\" /></button>\n                                <br />\n                            </>}\n                            {movementHistory.map((movement, key) => {\n\n                                return (\n                                    <div style={{ fontSize: '13px', marginBottom: '5px', display: 'flex', justifyContent: 'center' }} key={key}>\n                                        <div style={{ marginRight: '5px' }}>\n                                            <i className={movement.icon} style={{ color: movement.isPieceWhite ? 'white' : 'black' }} />\n                                        </div>\n                                        <div>\n                                            {movement.prevPosition} <i className=\"fa fa-arrow-right\" /> {movement.position}\n                                        </div>\n                                    </div>\n                                )\n\n                            })}\n                        </div>\n                    </div> </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CheckersGame;\n","import {useContext, useEffect, useRef, useState} from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport {StateContext} from \"./StateProvider\";\n\n\nfunction NavBar() {\n    const history = useHistory();\n    const {optionsClicked, setOptionsClicked} = useContext(StateContext)\n\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <span>\n                {history.location.pathname != '/' &&\n                    <span onClick={() => history.goBack()} style={{width: '50px', cursor: 'pointer'}}\n                          className=\"text-center d-inline-block\">\n                    <i className=\"fa fa-arrow-left\"> </i>\n                </span>}\n\n                <Link className=\"navbar-brand\" to=\"/\">\n                    <div style={{width: '50px'}} className=\"d-inline-block text-center\">\n                    <img src=\"favicon.png\" width=\"25\" height=\"25\" className=\"align-top\" alt=\"\"/>\n                    </div>\n                 \n                    <span className=\" d-inline-block\">\n                    Games\n                    </span>\n                </Link>\n\n                <form style={{float:'right'}}>\n                  <span onClick={() => setOptionsClicked(!optionsClicked)} style={{width: '50px', cursor: 'pointer'}}\n                        className=\"text-center d-inline-block form-inline\">\n                        <i className=\"fa fa-cog\"> </i>\n                    </span>\n                </form>\n\n            </span>\n        </nav>\n    )\n\n}\n\nexport default NavBar;\n","export interface Position {\n    x: number;\n    y: number;\n}\nexport type WallType = 'H' | 'V' | 'B';\nexport enum Direction {\n    up,\n    down,\n    right,\n    left\n}","export default class Subscription<T> {\n    fns:Function[] = [];\n    constructor() {\n    }\n\n    emit = (value:T) => {\n        this.fns.forEach(fn => {\n            fn(value)\n        })\n\n    }\n    subscribe = (fn: Function) => {\n        this.fns.push(fn)\n    }\n}","import {Direction} from \"../types\";\nimport Subscription from \"./Subscription\";\nimport Circle from \"../models/Circle\";\n\nexport function gridToPosition(gridX: number, gridY: number) {\n    return {x: gridX * 20, y: gridY * 20};\n}\n\nexport function positionToGrid(x: number, y: number) {\n    return {x: x / 20, y: y / 20};\n}\n\nexport function clear(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n}\n\n\nexport function moveFrame(frameX: number, frameY: number, canvasContainer: HTMLDivElement, player: Circle, stack: {\n    horizontal: any[],\n    vertical: any[]\n}) {\n    const pos = {\n        frameX,\n        frameY,\n    }\n\n    return (direction: Direction) => {\n        const movemtntPixel = 60;\n        if (direction == Direction.up) pos.frameY -= movemtntPixel\n        else if (direction == Direction.down) pos.frameY += movemtntPixel\n        else if (direction == Direction.right) pos.frameX += movemtntPixel\n        else if (direction == Direction.left) pos.frameX -= movemtntPixel\n\n        let distWidth = canvasContainer.clientWidth / 2;\n        let distHeight = canvasContainer.clientHeight / 2;\n\n        let previousInStack: any = null;\n        if(direction === Direction.up && stack.vertical.length) previousInStack = stack.vertical[stack.vertical.length-1];\n        if(direction === Direction.left && stack.horizontal.length) previousInStack = stack.horizontal[stack.horizontal.length-1];\n\n        if (direction == Direction.down && pos.frameY >= distHeight) {\n            stack.vertical.push({\n                frame: pos.frameY,\n                scroll: canvasContainer.scrollTop\n            })\n            let total = canvasContainer.scrollTop + distHeight;\n            if (total > canvasContainer.scrollHeight) {\n                total = canvasContainer.scrollHeight\n                distHeight = canvasContainer.scrollHeight - canvasContainer.scrollTop\n            }\n            canvasContainer.scrollTop = total;\n            pos.frameY -= distHeight\n\n        }\n\n        if(direction == Direction.up){\n            if(!previousInStack)return;\n            console.log(previousInStack)\n            if(pos.frameY <= previousInStack.frame ){\n                stack.vertical.pop();\n                canvasContainer.scrollTop = previousInStack.scroll;\n                pos.frameY = previousInStack.frame;\n\n            }\n        }\n\n        if (direction == Direction.right && pos.frameX >= distWidth) {\n            stack.horizontal.push({\n                frame: pos.frameX,\n                scroll: canvasContainer.scrollLeft\n            })\n            let total = canvasContainer.scrollLeft + distWidth;\n            if (total > canvasContainer.scrollWidth) {\n                total = canvasContainer.scrollWidth\n                distWidth = canvasContainer.scrollWidth - canvasContainer.scrollLeft\n            }\n            canvasContainer.scrollLeft = total;\n            pos.frameX -= distWidth\n\n        }\n\n\n        if(direction == Direction.left){\n            if(!previousInStack)return;\n            console.log(previousInStack)\n            if(pos.frameX <= previousInStack.frame ){\n                stack.horizontal.pop();\n                canvasContainer.scrollLeft = previousInStack.scroll;\n                pos.frameX = previousInStack.frame;\n\n            }\n        }\n\n    }\n}\n\n\nexport const keyboardObs = new Subscription()\nexport const stageObs = new Subscription<{ time?: number }>();\n","import {gridToPosition, positionToGrid} from \"../utils\";\nimport {Position} from \"../types\";\n\n\nexport default class Item{\n    protected ctx: CanvasRenderingContext2D;\n    protected state = {\n        position: {\n            x: 0,\n            y: 0,\n        },\n        grid: {\n            x: 0,\n            y: 0,\n\n        },\n        dimensions: {\n            width: 20,\n            height: 120\n        },\n        color: 'black',\n        noOfLines: 10,\n    }\n    protected boundaries = [\n        [[0,0],[0,0]],\n        [[0,0],[0,0]],\n    ]\n\n    constructor(ctx: CanvasRenderingContext2D,  gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined,style?: any) {\n        this.ctx = ctx;\n\n        if (position) {\n            this.state.position = position;\n            this.state.grid = positionToGrid(position.x,position.y)\n        } else {\n            this.state.position = gridToPosition(gridX, gridY);\n            this.state.grid = {\n                x:gridX,\n                y:gridY\n            }\n        }\n\n        // @ ts-ignore\n        if(style) {\n            this.state = {...this.state, ...style};\n        }\n        this.calculateBoundaries()\n    }\n\n    public  getBoundaries(){\n        return this.boundaries;\n    }\n    public isWithinBoundary (grid:number[][]){\n\n        return false;\n\n    }\n    public  calculateBoundaries(){\n        this.boundaries[0][0][0] = this.state.position.x;\n        this.boundaries[0][0][1] = this.state.position.y;\n\n        this.boundaries[0][1][0] = this.state.position.x + this.state.dimensions.width;\n        this.boundaries[0][1][1] = this.state.position.y;\n\n        this.boundaries[1][0][0] = this.state.position.x;\n        this.boundaries[1][0][1] = this.state.position.y + this.state.dimensions.height;\n\n        this.boundaries[1][1][0] = this.state.position.x + this.state.dimensions.width;\n        this.boundaries[1][1][1] = this.state.position.y + this.state.dimensions.height;\n\n\n    }\n    public updateGrid(gridX: number, gridY: number) {\n        this.state.position = gridToPosition(gridX, gridY);\n        this.state.grid.x = gridX;\n        this.state.grid.y = gridY;\n\n        this.calculateBoundaries()\n\n    }\n\n    public draw = {\n        all: () => {\n\n        }\n    }\n    public getStyle = () =>{\n        return this.state;\n    }\n    public debug = {\n        cordinates: () => {\n            this.getBoundaries().forEach(each => {\n                each.forEach(boundary =>{\n                    this.ctx.fillText(`${boundary[0]},${boundary[1]}`, boundary[0], boundary[1]);\n                })\n\n            })\n\n        },\n        highlight: () => {\n            this.ctx.beginPath();\n\n            this.ctx.strokeStyle = 'red';\n            this.ctx.strokeRect(\n                this.state.position.x,\n                this.state.position.y,\n                this.state.dimensions.width,\n                this.state.dimensions.height,\n            );\n        },\n\n        all: () => {\n            this.debug.cordinates()\n            this.debug.highlight()\n\n        }\n    }\n}","import {Position} from \"../types\";\nimport Item from \"./Item\";\n\nclass Wall extends Item{\n    private readonly type:string;\n\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined, type = 'V',state?: any) {\n        super(ctx,gridX,gridY,position, state);\n        this.ctx = ctx;\n        this.type = type;\n        this.state.noOfLines =  this.state.dimensions.height/10;\n\n        if (type == 'H') {\n            const temp = this.state.dimensions.width;\n            this.state.dimensions.width = this.state.dimensions.height;\n            this.state.dimensions.height = temp;\n            this.calculateBoundaries();\n        }\n\n        this.draw.all();\n\n\n    }\n    public updateGrid(gridX: number, gridY: number) {\n        this.updateGrid(gridX,gridY);\n        this.draw.all();\n\n    }\n    public draw = {\n        rect: () => {\n            this.ctx.beginPath();\n\n            this.ctx.strokeStyle = this.state.color;\n            this.ctx.strokeRect(\n                this.state.position.x,\n                this.state.position.y,\n                this.state.dimensions.width,\n                this.state.dimensions.height,\n            );\n\n            this.ctx.fill();\n\n        },\n        lines: () => {\n            if (this.type === 'V' || this.type === 'B') {\n                const diff = this.state.dimensions.height / this.state.noOfLines;\n                for (let i = 0; i < this.state.noOfLines; i++) {\n                    const _height = (this.state.dimensions.width / 2) + (i * diff);\n\n                    const heightWithPosition = _height + this.state.position.y;\n                    const widthWithPosition = this.state.position.x + this.state.dimensions.width\n\n                    if (_height > this.state.dimensions.height) {\n\n                    }\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = this.state.color;\n                    this.ctx.moveTo(this.state.position.x, this.state.position.y + (i * diff));\n                    this.ctx.lineTo(widthWithPosition, heightWithPosition);\n\n                    this.ctx.stroke();\n                }\n                return;\n            }\n\n\n            if(this.type == 'H'){\n                const diff = this.state.dimensions.width / this.state.noOfLines;\n                for (let i = 0; i < this.state.noOfLines; i++) {\n                    const _width = (this.state.dimensions.height / 2) + (i * diff);\n\n                    const widthWithPosition = _width + this.state.position.x;\n                    const heightWithPosition = this.state.position.y + this.state.dimensions.height\n\n                    if (_width > this.state.dimensions.width) {\n\n                    }\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = this.state.color;\n                    this.ctx.moveTo(this.state.position.x + (i * diff), this.state.position.y);\n                    this.ctx.lineTo(widthWithPosition, heightWithPosition);\n\n                    this.ctx.stroke();\n                }\n            }\n\n        },\n        all: () => {\n\n\n            this.draw.rect();\n            this.draw.lines();\n        }\n    }\n\n}\n\nexport class HWall extends Wall {\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined,style?:any) {\n        super(ctx, gridX, gridY, position, 'H',style)\n    }\n\n}\nexport class VWall extends Wall {\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined,style?:any) {\n        super(ctx, gridX, gridY, position, 'V',style)\n    }\n\n}\n","import Item from \"./Item\";\nimport {Position} from \"../types\";\nimport {stageObs} from \"../utils\";\n\nexport default class Circle extends Item {\n    private movementHistory: {x:number;y:number}[] = [];\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined) {\n        super(ctx, gridX, gridY, position, {dimensions: {height: 10, width: 10}})\n        this.movementHistory.push({x:this.state.position.x,y:this.state.position.y})\n        this.draw.all()\n    }\n\n    action = {\n        goTo: (gridX: number, gridY: number) => {\n            const prevGrid = {...this.state.grid};\n            const previousPosition = {...this.state.position};\n\n            const res = {\n                prevPosition: previousPosition,\n                reject: () => {\n                    this.updateGrid(prevGrid.x, prevGrid.y);\n                    this.draw.all();\n                },\n                accept: () => {\n                    this.movementHistory.push({...this.state.position})\n                    stageObs.emit({time:this.movementHistory.length-1})\n                    this.draw.all();\n                }\n\n            }\n            this.updateGrid(gridX, gridY);\n            return res;\n\n        },\n        down: (n = 1) => {\n            return this.action.goTo(this.state.grid.x, this.state.grid.y + n)\n        },\n        up: (n = 1) => {\n            return this.action.goTo(this.state.grid.x, this.state.grid.y - n)\n        },\n        right: (n = 1) => {\n            return this.action.goTo(this.state.grid.x + n, this.state.grid.y)\n        },\n        left: (n = 1) => {\n            return this.action.goTo(this.state.grid.x - n, this.state.grid.y)\n        }\n    }\n    public draw = {\n        history: () => {\n            this.movementHistory.forEach((curr, i) => {\n                if(i == 0) return;\n                const prev = this.movementHistory[i-1];\n                this.ctx.beginPath();\n                this.ctx.strokeStyle = this.state.color;\n                this.ctx.strokeRect(\n                    prev.x,\n                    prev.y,\n                    curr.x - prev.x,\n                    curr.y - prev.y,\n                );\n            })\n\n        },\n        arc: () => {\n            this.ctx.beginPath();\n            this.ctx.arc(\n                this.state.position.x,\n                this.state.position.y,\n                (this.state.dimensions.width) / 2,\n                0,\n                Math.PI * 2,\n                false\n            );\n\n            this.ctx.fillStyle = this.state.color;\n            this.ctx.fill();\n        },\n        all: () => {\n            this.draw.history();\n            this.draw.arc();\n        }\n    }\n\n}\n","import {Position} from \"../types\";\nimport Item from \"./Item\";\n\n\n class ImageItem extends Item{\n    private img = new Image()\n\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined, style?:any,src:string = '') {\n        super(ctx, gridX, gridY, position, style);\n\n        this.img.src = src;\n        this.img.onload = () => {\n            this.draw.all();\n        }\n    }\n\n    draw = {\n        image:() => {\n            this.ctx.drawImage(this.img,this.state.position.x, this.state.position.y, this.state.dimensions.width,this.state.dimensions.height);\n        },\n        all: () => {\n            this.draw.image()\n        }\n\n    }\n}\n\nexport  class Flower extends ImageItem {\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined) {\n        super(ctx, gridX, gridY, position,{dimensions: {height: 80, width: 80}, noOfLines: 2},process.env.PUBLIC_URL + '/assets/flower.png');\n    }\n}\n\nexport  class HCar extends ImageItem {\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined) {\n        super(ctx, gridX, gridY, position,{dimensions: {height: 40, width: 80}, noOfLines: 2},process.env.PUBLIC_URL + '/assets/hcar.png');\n    }\n}","import {Position, WallType} from \"../types\";\nimport Item from \"./Item\";\n\nclass Gate extends Item{\n    private readonly type:WallType;\n\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined, type:WallType = 'V',style?: any) {\n        super(ctx,gridX,gridY,position, style);\n\n        this.state.color = 'black';\n        this.type = type;\n\n        if (type == 'H') {\n            const temp = this.state.dimensions.width;\n            this.state.dimensions.width = this.state.dimensions.height;\n            this.state.dimensions.height = temp;\n            this.calculateBoundaries();\n        }\n\n        this.draw.all();\n\n\n    }\n    public updateGrid(gridX: number, gridY: number) {\n        this.updateGrid(gridX,gridY);\n        this.draw.all();\n\n    }\n    public draw = {\n        rect: () => {\n            this.ctx.beginPath();\n\n            this.ctx.strokeStyle = this.state.color;\n            const x = this.state.position.x + (this.type == 'V' ? 5 : 0)\n            const y = this.state.position.y + (this.type == 'H' ? 5 : 0)\n            this.ctx.strokeRect(\n                x,\n                y,\n                this.state.dimensions.width - (this.type == 'V' ? 10 : 0),\n                this.state.dimensions.height  - (this.type == 'H' ? 10 : 0),\n            );\n\n            this.ctx.fill();\n\n        },\n        all: () => {\n            this.draw.rect();\n        }\n    }\n\n}\n\nexport class HGate extends Gate {\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined) {\n        super(ctx, gridX, gridY, position, 'H',{dimensions:{width:20,height:80}})\n    }\n\n}\nexport class VGate extends Gate {\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined) {\n        super(ctx, gridX, gridY, position, 'V',{dimensions:{width:20,height:80}})\n    }\n\n}\n\n","import {HWall, VWall} from \"../models/Wall\";\nimport Item from \"../models/Item\";\nimport {keyboardObs, moveFrame} from \"../utils\";\nimport Circle from \"../models/Circle\";\nimport {Flower, HCar} from \"../models/ImageItem\";\nimport {HGate, VGate} from \"../models/Gate\";\nimport {Direction} from \"../types\";\n\nconst MOVEMENT_SPEED = 3;\n\n\nexport default class Scene1 {\n    pos = {\n        x: 7,\n        y: 10\n    }\n    scene: (Item | null)[][] = [];\n    private readonly canvasContainer: HTMLDivElement;\n    private readonly canvas: HTMLCanvasElement;\n    private readonly ctx: CanvasRenderingContext2D;\n    public player: Circle = null as any;\n    public generateGrid: any = null as any;\n    private stack = {\n        horizontal: [] as any [],\n        vertical: [] as any [],\n    }\n    private keyCb = null as any\n\n    constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, canvasContainer: HTMLDivElement, generateGrid: any) {\n        this.canvasContainer = canvasContainer;\n        this.canvas = canvas;\n        this.ctx = ctx;\n        this.generateGrid = generateGrid;\n\n\n        this.generateScenes();\n        const _moveFrame = moveFrame(\n            this.player.getStyle().position.x,\n            this.player.getStyle().position.y,\n            this.canvasContainer, this.player, this.stack);\n\n        this.keyCb = (e: KeyboardEvent, direction?: Direction) => {\n            e = e || window.event;\n            let valid = false;\n\n            if (e.keyCode == 38 || direction === Direction.up) {\n                direction = Direction.up\n                valid = true;\n                // up arrow\n                const move = this.player.action.up(MOVEMENT_SPEED);\n                if (!this.validate.move(direction, move)) return move.reject();\n                move.accept()\n                _moveFrame(direction)\n                // this.pos.frameY -= 20\n                // const prev = this.stack.vertical.length != 0 ? this.stack.vertical[this.stack.vertical.length - 1] : null;\n                // if (prev && this.player.getStyle().position.y <= prev.pos) {\n                //     this.pos.frameY += prev.dist;\n                //     this.canvasContainer.scrollTop = 0;\n                //     this.canvasContainer.scrollTop = prev.scrollPos;\n                //     this.stack.vertical.pop()\n                //\n                // }\n            } else if (e.keyCode == 40 || direction === Direction.down) {\n                direction = Direction.down\n                valid = true;\n                // down arrow\n                const move = this.player.action.down(MOVEMENT_SPEED);\n                if (!this.validate.move(direction, move)) return move.reject();\n                move.accept()\n                _moveFrame(direction)\n\n            } else if (e.keyCode == 37 || direction === Direction.left) {\n                direction = Direction.left\n                valid = true;\n                // left arrow\n                const move = this.player.action.left(MOVEMENT_SPEED);\n                if (!this.validate.move(direction, move)) return move.reject();\n                move.accept()\n                _moveFrame(direction)\n                // this.pos.frameX -= 20\n                // const prev = this.stack.horizontal.length != 0 ? this.stack.horizontal[this.stack.horizontal.length - 1] : null;\n                // if (prev && this.player.getStyle().position.x <= prev.pos) {\n                //     this.pos.frameX += prev.dist;\n                //     this.canvasContainer.scrollLeft = 0;\n                //     this.canvasContainer.scrollLeft = prev.scrollPos;\n                //     this.stack.horizontal.pop()\n                //\n                // }\n            } else if (e.keyCode == 39 || direction === Direction.right) {\n                direction = Direction.right\n                valid = true;\n                // right arrow\n                const move = this.player.action.right(MOVEMENT_SPEED);\n                if (!this.validate.move(direction, move)) return move.reject();\n                move.accept()\n                _moveFrame(direction)\n                // this.pos.frameX += 20\n                // if ((this.pos.frameX +50) >= windowUtils.x/2) {\n                //     let dist = (canvasContainer.clientWidth / 2);\n                //     let total = this.canvasContainer.scrollLeft + dist;\n                //\n                //     const obj = {\n                //         pos: this.player.getStyle().position.x,\n                //         scrollPos: this.canvasContainer.scrollLeft,\n                //         dist,\n                //     };\n                //\n                //\n                //     if (canvasContainer.scrollWidth < total) {\n                //         total = canvasContainer.scrollWidth\n                //     }\n                //     dist = total - this.canvasContainer.scrollLeft;\n                //\n                //     this.pos.frameX -= dist;\n                //     this.stack.horizontal.push(obj);\n                //     this.canvasContainer.scrollLeft = total;\n                // }\n            }\n\n            if (valid) {\n                this.ctx.clearRect(0, 0, canvas.width, canvas.height)\n                this.generateGrid()\n                this.generateScenes()\n            }\n\n        };\n\n        keyboardObs.subscribe((val) => {\n            this.keyCb(null, val)\n        })\n\n        document.addEventListener('keydown', this.keyCb, true)\n\n    }\n\n    public destroy() {\n        document.removeEventListener('keydown', this.keyCb, true)\n\n    }\n\n    private generateScenes() {\n        if (this.scene.length) {\n            this.scene.forEach(row => {\n                row.forEach(el => {\n                    if (!el) return;\n                    el.draw.all();\n                })\n            })\n            return;\n        }\n\n        this.player = new Circle(this.ctx, this.pos.x + (-0.8 * 5), this.pos.y + (-1.4 * 5));\n        const car = new HCar(this.ctx, this.pos.x + (-1.2 * 5), this.pos.y + (-1.6 * 5))\n        this.scene = [\n            [this.player],\n            [car],\n\n            [new HWall(this.ctx, this.pos.x, this.pos.y + (0.0 * 5), undefined, {\n                dimensions: {\n                    height: 140,\n                    width: 20\n                }\n            }), new HGate(this.ctx, this.pos.x + (1.4 * 5), this.pos.y + (0 * 5)), new HWall(this.ctx, this.pos.x + (2.2 * 5), this.pos.y + (0 * 5), undefined, {\n                dimensions: {\n                    height: 500,\n                    width: 20\n                }\n            })],\n\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (0.2 * 5), undefined, {\n                dimensions: {\n                    width: 20,\n                    height: 360\n                }\n            }), new VWall(this.ctx, this.pos.x + (7.0 * 5), this.pos.y + (0.2 * 5), undefined, {\n                dimensions: {\n                    width: 20,\n                    height: 740\n                }\n            })],\n            [new VGate(this.ctx, this.pos.x, this.pos.y + (3.8 * 5))],\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (4.6 * 5), undefined, {\n                dimensions: {\n                    height: 300,\n                    width: 20\n                }\n            })],\n\n            [new HWall(this.ctx, this.pos.x + (0.0 * 5), this.pos.y + (7.6 * 5), undefined, {\n                dimensions: {\n                    height: 720,\n                    width: 20\n                }\n            }),],\n\n            /**\n             * items\n             *\n             * */\n\n            /**\n             * flower\n             *\n             * */\n            [\n                new Flower(this.ctx, this.pos.x + (1.2 * 5), this.pos.y + (3.6 * 5)),\n                new Flower(this.ctx, this.pos.x + (2.4 * 5), this.pos.y + (3.6 * 5)),\n\n            ]\n        ];\n\n\n    }\n\n    private validate = {\n        move: (direction: Direction, move: {\n            prevPosition: { x: number, y: number },\n            reject: () => void,\n            accept: () => void\n        }) => {\n            const isVertical = direction == Direction.up || direction == Direction.down;\n            const isHorizontal = !isVertical;\n            const increments = [1, 2, 3, 4, 5, 6].map((i,) => ((isVertical ? move.prevPosition.y : move.prevPosition.x) + (((direction == Direction.up || direction === Direction.left) ? -i : i) * 10)));\n\n            const playerPosition = this.player.getStyle().position;\n\n            for (let row of this.scene) {\n                for (let el of row) {\n                    if (!el || el instanceof Circle || el instanceof HCar) continue;\n                    const boundary = el.getBoundaries();\n                    for (let pos of increments) {\n                        if (\n                            (isHorizontal ? pos : playerPosition.x) >= boundary[0][0][0]\n                            && (isHorizontal ? pos : playerPosition.x) <= boundary[0][1][0]\n                            && (isVertical ? pos : playerPosition.y) >= boundary[0][0][1]\n                            && (isVertical ? pos : playerPosition.y) <= boundary[1][0][1]\n\n                        ) {\n                            el.debug.all()\n                            console.log(el)\n                            return false;\n                        }\n\n\n                    }\n\n                }\n            }\n            return true\n        }\n\n\n    }\n}","import Scene1 from \"./scenes/Scene1\";\n\nfunction drawLines(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, horizontal = true) {\n    const size = 20;\n    let totalDrawn = 0;\n    let group = 0;\n    const boundary = (horizontal ? canvas.height : canvas.width);\n    while (totalDrawn < boundary) {\n        ctx.beginPath();\n        if (horizontal) {\n            ctx.moveTo(0, totalDrawn);\n            ctx.lineTo(canvas.width, totalDrawn);\n        } else {\n            ctx.moveTo(totalDrawn, 0);\n            ctx.lineTo(totalDrawn, canvas.height);\n        }\n\n        if (totalDrawn == 0 || group == 3) {\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = \"#c2a667\";\n            //ctx.strokeStyle = \"red\";\n            group = 0;\n        } else {\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = \"#c1a46a\"\n        }\n        ctx.stroke();\n        totalDrawn += size;\n        group++;\n    }\n\n\n}\n\n\nfunction drawGrid(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n    // Add behind elements.\n    ctx.globalCompositeOperation = 'destination-under'\n    // Now draw!\n    ctx.fillStyle = \"#e3ca8c\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    drawLines(canvas, ctx, true)\n    drawLines(canvas, ctx, false)\n}\n\nexport const draw = (canvas: HTMLCanvasElement | null, canvasContainer: HTMLDivElement | null) => {\n    if (!canvas || !canvasContainer) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    canvas.width = 1000;\n    canvas.height = 1400;\n\n    drawGrid(canvas, ctx)\n\n\n    new Scene1(canvas,ctx,canvasContainer, () => {\n        drawGrid(canvas, ctx)\n    })\n\n};\n\n\n\n","import './StolenIn60Seconds.css';\nimport {useContext, useEffect, useRef} from \"react\";\nimport {draw} from \"./misc/draw\";\nimport {StateContext} from \"../misc/StateProvider\";\nimport {Direction} from \"./misc/types\";\nimport {keyboardObs, stageObs} from \"./misc/utils\";\n\n\nfunction TimePill(props:any) {\n    const min = Math.floor(props.time / 60);\n    const seconds = props.time % 60;\n    return <div style={{background:'#ada69c', borderRadius:'5px',padding:'2.5px 5px',display:'inline-block',color:'#faf985',fontWeight:'bold',fontSize:'22px'}}>\n        {min < 10 ? '0'+min: min}:{seconds < 10 ? '0'+seconds: seconds}\n    </div>\n\n}\nfunction Controls() {\n    return <div>\n\n        <div style={{display: 'flex', justifyContent:'space-evenly'}}>\n            <div onClick={() => keyboardObs.emit(Direction.up)} className={'button'}><i className=\"fa fa-arrow-up\"></i>\n            </div>\n            <div onClick={() => keyboardObs.emit(Direction.down)} className={'button'}><i\n                className=\"fa fa-arrow-down\"></i></div>\n        </div>\n\n\n        <div style={{display: 'flex', justifyContent: 'space-evenly'}}>\n            <div onClick={() => keyboardObs.emit(Direction.left)} className={'button'}><i className=\"fa fa-arrow-left\"></i></div>\n\n            <div onClick={() => keyboardObs.emit(Direction.right)} className={'button'}><i className=\"fa fa-arrow-right\"></i></div>\n\n        </div>\n        </div>\n}\n\nfunction BottomPanel() {\n    const {stageProps,setStageProps} = useContext(StateContext);\n    useEffect(()=>{\n        stageObs.subscribe((val) => {\n            if(val.time != undefined){\n                stageProps.time = val.time;\n                setStageProps({...stageProps})\n            }\n        })\n\n    },[])\n    return (\n        <div style={{position: 'fixed', bottom: '0px', width: '100vw', background: '#213c42', zIndex: 10}} className={'p-2'}>\n<div style={{textAlign:'right'}}>\n    <TimePill time={stageProps.time} />\n</div>\n\n<br />\n            <div className={\"row\"}>\n                <div className={\"col-6\"}></div>\n                <div className={\"col-6\"}>\n                    <Controls />\n                </div>\n\n            </div>\n\n        </div>\n    )\n\n}\n\nexport default BottomPanel;\n","import './StolenIn60Seconds.css';\nimport {useContext, useEffect, useRef} from \"react\";\nimport {draw} from \"./misc/draw\";\nimport {StateContext} from \"../misc/StateProvider\";\nimport BottomPanel from \"./BottomPanel\";\n\nfunction StolenIn60SecondsGame() {\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n    const canvasContainerRef = useRef<HTMLDivElement>(null)\n\n    const {optionsClicked, setShowNav} = useContext(StateContext);\n\n    useEffect(() => {\n        draw(canvasRef.current, canvasContainerRef.current)\n    }, [])\n    return (\n        <div ref={canvasContainerRef} className=\"StolenIn60SecondsGame\">\n            <canvas ref={canvasRef}></canvas>\n            <BottomPanel/>\n        </div>\n    );\n}\n\nexport default StolenIn60SecondsGame;\n","import logo from './logo.svg';\nimport { BrowserRouter, Link, Redirect, Route, Router, Switch } from 'react-router-dom'\nimport ChessGame from './chess';\nimport Home from './Home';\nimport CheckersGame from './checkers';\nimport NavBar from './misc/Navbar';\nimport {useContext, useState} from \"react\";\nimport {StateContext, StateProvider} from \"./misc/StateProvider\";\nimport StolenIn60SecondsGame from \"./StolenIn60Seconds\";\n\nfunction App() {\n  const {showNav, setShowNav} = useContext(StateContext);\n\n  return (\n\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <NavBar/>\n      <Switch>\n        <Route path=\"/chess\" component={ChessGame} />\n        <Route path=\"/checkers\" component={CheckersGame} />\n        <Route path=\"/stolen-in-60-seconds\" component={StolenIn60SecondsGame} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {StateProvider} from \"./misc/StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <StateProvider>\n\n      <App />\n      </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}