{"version":3,"sources":["chess/engine/PieceMovement.ts","chess/engine/ChessPiece.ts","chess/engine/ChessQueen.ts","chess/engine/ChessPawn.ts","chess/engine/ChessBishop.ts","chess/engine/ChessRook.ts","chess/engine/ChessKing.ts","chess/engine/ChessKnight.ts","chess/engine/ChessBoard.ts","chess/misc/Bar.tsx","env.ts","misc/functions.ts","misc/data.ts","misc/StateProvider.tsx","chess/index.tsx","Home.tsx","checkers/engine/PieceMovement.ts","checkers/engine/CheckerPiece.ts","checkers/engine/CheckerQueen.ts","checkers/engine/CheckerPawn.ts","checkers/misc/index.ts","checkers/engine/CheckerBoard.ts","checkers/index.tsx","misc/Navbar.tsx","StolenIn60Seconds/misc/util.ts","StolenIn60Seconds/misc/models/Wall.ts","StolenIn60Seconds/misc/models/Item.ts","StolenIn60Seconds/misc/scenes/Scene1.ts","StolenIn60Seconds/misc/draw.ts","StolenIn60Seconds/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PieceMovement","piece","prevPositionYIndex","prevPositionXIndex","positionYIndex","positionXIndex","id","name","icon","isPieceWhite","prevPosition","position","this","ChessPiece","availableXMovements","availableYMovements","el","chessBoard","ghostId","successfulMovements","ChessBoard","king","oppKing","anticipateOppMoves","_","i","board","length","j","cellPiece","availableMoves","forEach","m","anticipateMyMoves","cell","undefined","globalId","yIndex","xIndex","cb","movement","pieceHash","canmove","movements","temp","previousPositionYIndex","previousPositionXIndex","alert","addToMovement","type","ChessQueen","indexes","analyzeAndBreak","incY","incX","possiblePiece","push","Math","max","map","index","positionY","positionX","ChessPawn","_parent","prototype","move","apply","queen","incY1","incY2","ChessBishop","ChessRook","ChessKing","curr","ChessKnight","dummy","isWhiteTurnToPlay","killedHash","movementIndex","initiated","init","blackKing","whiteKing","JSON","stringify","r","n","getMovements","unshift","slice","Bar","pieceWidth","horizontal","arr","className","c","x","style","width","height","LOGGING","process","production","csvGenerator","data","csvContent","obj","row","toCSV","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","NAVS","to","img","f","min","window","innerHeight","innerWidth","StateContext","createContext","StateProvider","children","useState","states","showNav","setShowNav","Provider","value","ChessGame","boardWidth","size","setSize","setBoard","movementHistory","setMovementHistory","setAvailableMoves","selectedPiece","setSelectedPiece","chessBoardRef","useRef","setIsWhiteTurnToPlay","canUndo","canRedo","setUndoAndRedo","useContext","reloadBoard","current","onPieceClick","y","o","toString","console","warn","a","useEffect","addEventListener","removeEventListener","display","shouldHighlight","onClick","backgroundColor","justifyContent","alignItems","color","performUndo","performRedo","padding","textAlign","key","fontSize","marginBottom","marginRight","Home","boundWidth","setBoundWidth","elem","querySelector","rect","getBoundingClientRect","nav","verticalAlign","background","backgroundSize","visibility","jumpPosition","CheckerPiece","CheckerBoard","clone","serialize","s","p","CheckerQueen","preArr","log","inBound","addToHash","hash","preventDFS","val","n1","n2","n3","n4","Object","values","CheckerPawn","checkerPieceDeSerialize","newBoard","newCheckerBoard","pos","deSerialize","str","checkerBoard","parse","_board","_movements","_movementIndex","_isWhiteTurnToPlay","_killedHash","_piece","CheckersGame","checkerBoardRef","localStorage","setItem","getItem","NavBar","history","useHistory","location","pathname","goBack","cursor","src","alt","gridToPosition","gridX","gridY","Wall","ctx","draw","beginPath","strokeStyle","strokeRect","dimensions","fill","lines","diff","_width","widthWithPosition","heightWithPosition","moveTo","lineTo","stroke","_height","all","calculateBoundaries","boundaries","grid","HWall","VWall","Scene1","scene","drawLines","canvas","totalDrawn","group","boundary","lineWidth","StolenIn60SecondsGame","canvasRef","getContext","globalCompositeOperation","fillStyle","fillRect","ref","App","basename","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.975faf7d.chunk.js","sourcesContent":["import { ChessBoard } from \"./ChessBoard\";\nimport { ChessKing } from \"./ChessKing\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class PieceMovement {\n    id: number;\n    name: string;\n    icon: string;\n    isPieceWhite: boolean\n\n    prevPositionYIndex: number;\n    prevPositionXIndex: number;\n    prevPosition: string;\n    positionYIndex: number;\n    positionXIndex: number;\n    position: string;\n\n    constructor(\n        piece: ChessPiece,\n        prevPositionYIndex: number,\n        prevPositionXIndex: number,\n        positionYIndex: number,\n        positionXIndex: number,\n\n    ) {\n\n        this.id = piece.id;\n        this.name = piece.name;\n        this.icon = piece.icon;\n        this.isPieceWhite = piece.isPieceWhite;\n        this.prevPositionYIndex = prevPositionYIndex;\n        this.prevPositionXIndex = prevPositionXIndex;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n        this.prevPosition = `${ChessPiece.availableXMovements[this.prevPositionXIndex]}${ChessPiece.availableYMovements[this.prevPositionYIndex]}`\n        this.position = `${ChessPiece.availableXMovements[this.positionXIndex]}${ChessPiece.availableYMovements[this.positionYIndex]}`\n\n    }\n    toJSON() {\n        return [\n            this.id,\n            this.name,\n            this.icon,\n            this.isPieceWhite,\n            this.prevPositionYIndex,\n            this.prevPositionXIndex,\n            this.positionYIndex,\n            this.positionXIndex,\n            this.prevPosition,\n            this.position,\n\n        ]\n\n    }\n    toCSV() {\n        return [\n            // this.id,\n            this.name,\n            this.isPieceWhite?'white':'black',\n            // this.prevPositionYIndex,\n            // this.prevPositionXIndex,\n            // this.positionYIndex,\n            // this.positionXIndex,\n            this.prevPosition,\n            this.position,\n\n        ]\n\n    }\n    fromJSON(el:any []){\n        this.id = el[0]\n        this.name = el[1]\n        this.icon = el[2]\n        this.isPieceWhite = el[3]\n        this.prevPositionYIndex = el[4]\n        this.prevPositionXIndex = el[5]\n        this.positionYIndex = el[6]\n        this.positionXIndex = el[7]\n        this.prevPosition = el[8]\n        this.position = el[9]\n\n    }\n\n\n\n}\n","import { devLog } from \"../../env\";\nimport { ChessBoard } from \"./ChessBoard\";\nimport { ChessKing } from \"./ChessKing\";\nimport { PieceMovement } from \"./PieceMovement\";\n\nexport abstract class ChessPiece {\n    name = 'piece'\n    icon = 'chess'\n    static availableXMovements = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    static availableYMovements = ['8', '7', '6', '5', '4', '3', '2', '1'];\n\n    positionXIndex = 0;\n    positionYIndex = 0;\n    isPieceWhite = true;\n    successfulMovements = 0;\n\n    chessBoard: ChessBoard = new ChessBoard(true);\n    static globalId = 0\n    id = 0\n\n    king: ChessKing | null = null;\n    oppKing: ChessKing | null = null;\n\n    constructor(\n        chessBoard: ChessBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean,\n        ghostId?: number\n    ) {\n        if (ghostId == undefined) {\n            ChessPiece.globalId++;\n            this.id = ChessPiece.globalId;\n        } else {\n            this.id = ghostId\n        }\n\n\n\n        this.chessBoard = chessBoard;\n        this.isPieceWhite = isPieceWhite;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n\n    }\n\n    anticipateOppMoves = () => {\n        const _: { [id: string]: boolean } = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cellPiece = this.chessBoard.board[i][j];\n                if (cellPiece && cellPiece.isPieceWhite !== this.isPieceWhite) {\n                    cellPiece.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n    anticipateMyMoves = () => {\n        const _ = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cell = this.chessBoard.board[i][j];\n                if (cell && cell.isPieceWhite === this.isPieceWhite) {\n                    cell.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n\n    move(yIndex: number, xIndex: number, cb?: () => void) {\n        const movement = new PieceMovement(this.chessBoard.pieceHash[this.id], this.positionYIndex, this.positionXIndex, yIndex, xIndex);\n        const availableMoves = this.availableMoves();\n        let canmove = false;\n        availableMoves.forEach(movements => {\n\n            if (movements.positionYIndex === yIndex && movements.positionXIndex === xIndex) {\n                canmove = true;\n            }\n        })\n\n        if (!canmove) {\n            return false;\n        }\n        // swap pos in board;\n        const temp = this.chessBoard.board[this.positionYIndex][this.positionXIndex]\n\n\n\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n        const previousPositionYIndex = this.positionYIndex;\n        const previousPositionXIndex = this.positionXIndex;\n        this.positionYIndex = yIndex;\n        this.positionXIndex = xIndex;\n\n        // assign new pos\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = temp;\n        // test to see if the move puts the king at risk\n        const oppMoves = this.anticipateOppMoves();\n        if (oppMoves[this.king?.positionYIndex + ',' + this.king?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('king at risk')\n\n            this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n            this.positionYIndex = previousPositionYIndex;\n            this.positionXIndex = previousPositionXIndex;\n\n            this.chessBoard.board[previousPositionYIndex][previousPositionXIndex] = temp;\n\n\n            return false;\n        }\n        const myMoves = this.anticipateMyMoves();\n        if (myMoves[this.oppKing?.positionYIndex + ',' + this.oppKing?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('check')\n\n\n\n        }\n\n        if (cb) {\n            cb()\n        }\n\n        this.successfulMovements++;\n        this.chessBoard.addToMovement(movement);\n        //devLog(movement)\n        return true;\n\n\n    }\n    availableMoves = () => {\n        return [] as {\n            positionYIndex: number;\n            positionY: string;\n            positionXIndex: number;\n            positionX: string;\n        }[]\n\n    }\n\n    toString() {\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.isPieceWhite ? 'White' : 'Black',\n            position: `${ChessPiece.availableXMovements[this.positionXIndex]}${ChessPiece.availableYMovements[this.positionYIndex]}`\n        }\n            ;\n    }\n    currentPosition() {\n        return `Y = ${this.positionYIndex}, X = ${this.positionXIndex}`\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessQueen extends ChessPiece {\n    name = 'queen'\n    icon = 'fas fa-chess-queen'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex + i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex -i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex - i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i <= this.positionYIndex; i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex + i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessQueen } from \"./ChessQueen\";\nimport { ChessPiece } from \"./ChessPiece\";\nimport { ChessBoard } from \"./ChessBoard\";\n\nexport class ChessPawn extends ChessPiece {\n    name = 'pawn'\n    icon = 'fas fa-chess-pawn'\n    _parent = ChessPiece.prototype\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite,ghostId);\n    }\n\n    move = (yIndex:number, xIndex:number) => {\n\n        return this._parent.move.apply(this, [yIndex, xIndex, () => {\n            // check if its promotable\n            if (this.isPieceWhite && yIndex === 0 || !this.isPieceWhite && yIndex === 7) {\n                // promote\n                const queen = new ChessQueen(this.chessBoard, yIndex, this.positionXIndex, this.isPieceWhite,this.id);\n                queen.king = this.king;\n                queen.oppKing = this.oppKing;\n                this.chessBoard.board[this.positionYIndex][this.positionXIndex] = queen;\n            }\n\n\n        }])\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n        }[] = [];\n        const incY1 = !this.isPieceWhite ? 1 : -1;\n        const incY2 = !this.isPieceWhite ? 2 : -2;\n\n\n\n\n        // check if it can move a step in y axes and if its own piece isnt on its moves\n        if (this.positionYIndex + incY1 < ChessPiece.availableXMovements.length && this.positionYIndex + incY1 >= 0 && !this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex]) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex })\n\n            if (this.successfulMovements === 0) {\n                // check if its first time, only move if theres nothing in the way\n\n                if (this.positionYIndex + incY2 < ChessPiece.availableYMovements.length && this.positionYIndex + incY2 >= 0 && !this.chessBoard.board[this.positionYIndex + incY2][this.positionXIndex]) {\n                    indexes.push({ positionYIndex: this.positionYIndex + incY2, positionXIndex: this.positionXIndex })\n\n                }\n            }\n\n\n\n        }\n\n\n\n    \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length && this.positionYIndex + incY1 >= 0  && this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex + 1] &&this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex + 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex + 1 })\n            // check diagonal if an opp is there\n        }\n \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length  && this.positionYIndex + incY1 >= 0 && this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex - 1] &&this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex - 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex - 1 })\n            // check diagonal if an opp is there\n        }\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessBishop extends ChessPiece {\n    name = 'bishop'\n    icon = 'fas fa-chess-bishop'\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY, incX) => {\n            if (incY < 0 || incY > 7 || incX < 0 || incX > 7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n\n        // do diagonal \n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex + i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex - i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex - i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i <= Math.max(this.positionYIndex,this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex + i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessRook extends ChessPiece {\n    name = 'rook'\n    icon = 'fas fa-chess-rook'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKing extends ChessPiece {\n    name = 'king'\n    icon = 'fas fa-chess-king'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n           \n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n      \n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [1,0],\n            [0,1],\n            [-1,0],\n            [0,-1],\n\n            [1,1],\n            [-1,-1],\n            [-1,1],\n            [1,-1],\n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKnight extends ChessPiece {\n    name = 'knight'\n    icon = 'fas fa-chess-knight'\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n\n    }\n\n\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n   \n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n           \n          \n           \n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n             //   return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [2,1],\n            [2,-1],\n            [-2,1],\n            [-2,-1],\n            [1,2],\n            [1,-2],\n            [-1,2],\n            [-1,-2],\n      \n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n\n}\n","import { ChessPawn } from \"./ChessPawn\";\nimport { ChessQueen } from \"./ChessQueen\";\nimport { ChessBishop } from \"./ChessBishop\";\nimport { ChessRook } from \"./ChessRook\";\nimport { ChessKing } from \"./ChessKing\";\nimport { ChessKnight } from \"./ChessKnight\";\nimport { ChessPiece } from \"./ChessPiece\";\nimport { PieceMovement } from \"./PieceMovement\";\n\n\n\nexport class ChessBoard {\n    board: ChessKing[][] | null[][] = [\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n    ]\n    isWhiteTurnToPlay = false\n    pieceHash: { [id: number]: ChessPiece } = {}\n    killedHash: { [str: string]: ChessPiece | null } = {}\n    private movements: PieceMovement[] = []\n    movementIndex = 0\n    private initiated = false;\n    constructor(dummy = false) {\n        if (this.initiated || dummy) return\n\n        this.init()\n        this.initiated = true;\n\n    }\n    init() {\n\n        const blackKing = new ChessKing(this, 0, 3, false);\n        this.board[0][3] = blackKing\n\n        this.board[0][0] = new ChessRook(this, 0, 0, false);\n        this.board[0][7] = new ChessRook(this, 0, 7, false);\n\n        this.board[0][1] = new ChessKnight(this, 0, 1, false);\n        this.board[0][6] = new ChessKnight(this, 0, 6, false);\n\n        this.board[0][4] = new ChessQueen(this, 0, 4, false);\n        this.board[0][2] = new ChessBishop(this, 0, 2, false);\n        this.board[0][5] = new ChessBishop(this, 0, 5, false);\n\n        this.board[1][0] = new ChessPawn(this, 1, 0, false);\n        this.board[1][1] = new ChessPawn(this, 1, 1, false);\n        this.board[1][2] = new ChessPawn(this, 1, 2, false);\n        this.board[1][3] = new ChessPawn(this, 1, 3, false);\n        this.board[1][4] = new ChessPawn(this, 1, 4, false);\n        this.board[1][5] = new ChessPawn(this, 1, 5, false);\n        this.board[1][6] = new ChessPawn(this, 1, 6, false);\n        this.board[1][7] = new ChessPawn(this, 1, 7, false)\n\n\n\n\n        const whiteKing = new ChessKing(this, 7, 3, true);\n        this.board[7][3] = whiteKing\n        this.board[7][0] = new ChessRook(this, 7, 0, true);\n        this.board[7][7] = new ChessRook(this, 7, 7, true);\n        this.board[7][1] = new ChessKnight(this, 7, 1, true);\n        this.board[7][6] = new ChessKnight(this, 7, 6, true);\n        this.board[7][4] = new ChessQueen(this, 7, 4, true);\n        this.board[7][2] = new ChessBishop(this, 7, 2, true);\n        this.board[7][5] = new ChessBishop(this, 7, 5, true);\n\n        this.board[6][0] = new ChessPawn(this, 6, 0, true);\n        this.board[6][1] = new ChessPawn(this, 6, 1, true);\n        this.board[6][2] = new ChessPawn(this, 6, 2, true);\n        this.board[6][3] = new ChessPawn(this, 6, 3, true);\n        this.board[6][4] = new ChessPawn(this, 6, 4, true);\n        this.board[6][5] = new ChessPawn(this, 6, 5, true);\n        this.board[6][6] = new ChessPawn(this, 6, 6, true);\n        this.board[6][7] = new ChessPawn(this, 6, 7, true);\n\n\n\n\n\n        // set the aims for all pieces, whom they should protect and whom they should all attack\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell) {\n                    this.pieceHash[cell.id] = cell;\n                    if (cell.isPieceWhite) { // if its my piece\n\n                        cell.king = whiteKing;\n                        cell.oppKing = blackKing;\n                    } else {\n                        cell.oppKing = whiteKing;\n                        cell.king = blackKing;\n                    }\n\n                }\n\n            }\n        }\n\n\n    }\n\n    toString() {\n        return JSON.stringify(this.board.map(r => r.map(_ => _ ? `${_.id}-${_.name}` : 'null')));\n    }\n    canUndo() {\n        return (this.movementIndex < this.movements.length)\n    }\n    canRedo() {\n        return (this.movementIndex - 1 >= 0)\n    }\n    performUndo() {\n\n        const movement = this.movements[this.movementIndex]\n        const piece = this.board[movement.positionYIndex][movement.positionXIndex];\n\n        if (!piece) return;\n\n        piece.positionYIndex = movement.prevPositionYIndex;\n        piece.positionXIndex = movement.prevPositionXIndex;\n\n\n        this.board[movement.prevPositionYIndex][movement.prevPositionXIndex] = piece;\n\n        this.board[movement.positionYIndex][movement.positionXIndex] = this.killedHash[movement.positionYIndex + ',' + movement.positionXIndex];\n\n        this.movementIndex++;\n    }\n\n    performRedo() {\n        this.movementIndex--;\n\n        const movement = this.movements[this.movementIndex]\n        const piece = this.board[movement.prevPositionYIndex][movement.prevPositionXIndex];\n        if (!piece) return;\n\n\n        piece.positionYIndex = movement.positionYIndex;\n        piece.positionXIndex = movement.positionXIndex;\n\n        this.board[movement.positionYIndex][movement.positionXIndex] = piece;\n\n        this.board[movement.prevPositionYIndex][movement.prevPositionXIndex] = null;\n\n    }\n    addToMovement(movement: PieceMovement) {\n        const n = this.getMovements();\n        n.unshift(movement);\n        this.movements = n;\n        this.movementIndex = 0;\n\n    }\n    getMovements() {\n        return this.movements.slice(this.movementIndex);\n    }\n\n}\n\n\n\n\n","import { useEffect, useRef, useState } from \"react\";\nimport { ChessPiece } from \"../engine/ChessPiece\";\n\nfunction Bar({pieceWidth,horizontal}) {\n    const arr = horizontal ? ChessPiece.availableXMovements: ChessPiece.availableYMovements;\nreturn (\n\n\n                <div className={horizontal ?'Bar-X': ''} >\n                    {arr.map((c, x) => {\n                        return (<div key={x} className={horizontal ?'Bar-X': 'Board-X'} style={{ width: pieceWidth + 'px', height: pieceWidth + 'px', }}>\n                            {c}\n                        </div>)\n                    })}\n                </div>\n)\n    \n}\n\nexport default Bar;\n","export const LOGGING = true && !process.env.production;\nexport const devLog = (o)=> {\n    if(!LOGGING) return;\n    console.warn(o)\n\n}","import { PieceMovement } from \"../chess/engine/PieceMovement\";\n\nexport const safeObjectAssessor = (...args) => {\n    let base = args[0];\n\n    for (let i = 1; i < args.length; i++) {\n        if (!base) return false;\n        base = base[args[i]];\n    }\n\n    return true;\n\n}\nexport const csvGenerator = (data: PieceMovement[]) => {\n\n    let csvContent = \"data:text/csv;charset=utf-8,\";\n\n    data.forEach(function (obj: PieceMovement) {\n        let row = obj.toCSV().join(\",\");\n        csvContent += row + \"\\r\\n\";\n    });\n    var encodedUri = encodeURI(csvContent);\n    var link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"my_data.csv\");\n    document.body.appendChild(link); // Required for FF\n\n    link.click();\n}\n","\nexport const NAVS = [\n    {\n        to:'/chess',\n        name:'Chess',\n        img:process.env.PUBLIC_URL + '/assets/chess-banner.png'\n    },\n    {\n        to:'/checkers',\n        name:'Checkers',\n        img:process.env.PUBLIC_URL + '/assets/checkers-banner.png'\n    },    {\n        to:'/stolen-in-60-seconds',\n        name:'Stolen in 60 seconds',\n        img:process.env.PUBLIC_URL + '/assets/checkers-banner.png'\n    }\n]\n\nexport interface HashIndex {\n    [id: string]: {\n        positionYIndex: number\n        positionXIndex: number\n        jumpPosition?: number[][]\n        id: 0\n\n\n    }\n}\n\nexport function f() {\n    return Math.min(window.innerHeight, window.innerWidth)  - (150 + (window.innerWidth > 700 ? 100 : 0))\n}","import React, { FC, useState, createContext } from 'react';\n\ninterface StateContext  {\n    showNav: boolean;\n    setShowNav: (value: (((prevState: boolean) => boolean) | boolean)) => void;\n};\n\n\nexport const StateContext = createContext<StateContext>(\n    {} as StateContext\n);\n\nexport const StateProvider = ({ children }: any) => {\n    const [showNav, setShowNav] = useState(true);\n\n    const states = {\n        showNav, setShowNav\n    }\n\n    return (\n        <StateContext.Provider value={states}>\n            {children}\n        </StateContext.Provider>\n    );\n};\n","import {useContext, useEffect, useRef, useState} from \"react\";\nimport { ChessBoard } from \"./engine/ChessBoard\";\nimport './Chess.css';\nimport { ChessPiece } from \"./engine/ChessPiece\";\nimport Bar from \"./misc/Bar\";\nimport { devLog } from '../env'\nimport { PieceMovement } from \"./engine/PieceMovement\";\nimport { csvGenerator } from \"../misc/functions\";\nimport { f } from \"../misc/data\";\nimport {StateContext} from \"../misc/StateProvider\";\n\n\n\nfunction ChessGame() {\n    const [size, setSize] = useState({\n        boardWidth: f(),\n        pieceWidth: (f()) / 8\n    })\n    const [board, setBoard] = useState([] as ChessPiece[][] | null[][])\n    const [movementHistory, setMovementHistory] = useState([] as PieceMovement[])\n    const [availableMoves, setAvailableMoves] = useState({} as { [id: string]: boolean })\n    const [selectedPiece, setSelectedPiece] = useState(null as ChessPiece | null)\n\n    const chessBoardRef = useRef(null as any as ChessBoard);\n\n    const [isWhiteTurnToPlay, setIsWhiteTurnToPlay] = useState(true);\n    const [{ canUndo, canRedo }, setUndoAndRedo] = useState({ canUndo: false, canRedo: false });\n\n    const {showNav, setShowNav} = useContext(StateContext)\n\n    function reloadBoard() {\n        chessBoardRef.current.isWhiteTurnToPlay = !chessBoardRef.current.isWhiteTurnToPlay\n        setBoard(chessBoardRef.current.board)\n        setMovementHistory(chessBoardRef.current.getMovements())\n        setAvailableMoves({});\n        setSelectedPiece(null);\n        setIsWhiteTurnToPlay(chessBoardRef.current.isWhiteTurnToPlay)\n        setUndoAndRedo({ canRedo: chessBoardRef.current.canRedo(), canUndo: chessBoardRef.current.canUndo() })\n    }\n    function init() {\n        chessBoardRef.current = new ChessBoard();\n\n        reloadBoard()\n    }\n\n\n    useEffect(() => {\n        setShowNav(false)\n        init()\n        const cb = () => {\n            const boardWidth = f()\n            const pieceWidth = boardWidth / 8;\n\n            setSize(\n                {\n                    boardWidth,\n                    pieceWidth\n                }\n            )\n\n        }\n        window.addEventListener('resize', cb)\n        return () => {\n            window.removeEventListener('resize', cb)\n        }\n\n\n    }, [])\n\n    function onPieceClick(piece: ChessPiece | null, y: number, x: number) {\n        if (availableMoves[y + \",\" + x]) {\n            if (!selectedPiece?.move(y, x)) {\n                // invalid move\n                return;\n            }\n\n            reloadBoard()\n\n\n\n\n        } else if (piece) {\n            devLog(piece.toString())\n            if (isWhiteTurnToPlay !== piece.isPieceWhite) {\n                setAvailableMoves({});\n                setSelectedPiece(null);\n                return;\n            }\n\n\n            // show available moves\n            const a = piece.availableMoves();\n\n            const _: { [id: string]: boolean } = {}\n            a.forEach(m => {\n\n                _[m.positionYIndex + \",\" + m.positionXIndex] = true\n            });\n\n            setAvailableMoves(_);\n            setSelectedPiece(piece);\n\n        } else {\n            setAvailableMoves({});\n            setSelectedPiece(null);\n        }\n\n    }\n    function performRedo() {\n        chessBoardRef.current.performRedo();\n        reloadBoard()\n    }\n    function performUndo() {\n        chessBoardRef.current.performUndo();\n        reloadBoard()\n    }\n\n    return (\n        <div className=\"Whole-Body\">\n\n            <div className=\"Chess-Field\">\n                <div className=\"Chess-Pre-Playable\">\n                    <Bar pieceWidth={size.pieceWidth} horizontal />\n                    <div className=\"Chess-Playable\">\n                        <Bar pieceWidth={size.pieceWidth} horizontal={false} />\n                        <div className='Board' style={{ width: size.boardWidth + 'px', height: size.boardWidth + 'px' }} >\n\n                            {board.map((row: ChessPiece[] | null[], y: number) => {\n\n                                return (<div key={y} className='Board-Y' style={{ display: 'flex' }}>\n\n\n\n                                    {row.map((piece: ChessPiece | null, x: number) => {\n\n                                        const shouldHighlight = availableMoves[y + \",\" + x];\n                                        return (<div onClick={() => onPieceClick(piece, y, x)} key={x} className='Board-X' style={{ width: size.pieceWidth + 'px', height: size.pieceWidth + 'px', backgroundColor: (x % 2 === 0) === (y % 2 === 0) ? 'rgba(245, 222, 179, 0.596)' : '' }}>\n                                            <div className={!piece ? '' : (isWhiteTurnToPlay !== piece.isPieceWhite) ? 'Piece-inner-invalid' : 'Piece-inner-valid'} style={{ width: '70%', height: '70%', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: !(shouldHighlight || piece && piece === selectedPiece) ? '' : 'rgba(255, 255, 0, 0.5)' }}>\n                                                {piece ? <i className={piece.icon} style={{ color: (piece.isPieceWhite ? \"white\" : \"black\") }} ></i> : ''}\n\n                                            </div>\n                                        </div>\n\n\n                                        )\n                                    })}\n\n\n\n                                </div>\n\n\n                                )\n                            })}\n                        </div>\n                        <Bar pieceWidth={size.pieceWidth} horizontal={false} />\n                    </div>\n                    <Bar pieceWidth={size.pieceWidth} horizontal />\n                    <div className=\"text-center\">\n                        {canUndo && <button onClick={performUndo} className=\"m-2\">  <i className=\"fa fa-undo\" /></button>}\n                        {canRedo && <button onClick={performRedo} className=\"m-2\">  <i className=\"fa fa-redo\" /></button>}\n\n\n                    </div>\n                </div>\n              \n                <div className='Side' style={{ padding: '10px' }} >\n                    <div className='' style={{ padding: '0 30px' }} >\n                        Piece To Play\n                        <br />\n                        <i className={'fa fa-chess '} style={{ color: isWhiteTurnToPlay ? 'white' : 'black' }} ></i>\n                        <hr />\n                        <div style={{ textAlign: 'center' }}>\n                            {movementHistory.length != 0 && <>\n                                <button onClick={() => { csvGenerator(movementHistory) }}><i className=\"fa fa-file-download\" /></button>\n                                <br />\n                            </>}\n                            {movementHistory.map((movement, key) => {\n\n                                return (\n                                    <div style={{ fontSize: '13px', marginBottom: '5px', display: 'flex', justifyContent: 'center' }} key={key}>\n                                        <div style={{ marginRight: '5px' }}>\n                                            <i className={movement.icon} style={{ color: movement.isPieceWhite ? 'white' : 'black' }} />\n                                        </div>\n                                        <div>\n                                            {movement.prevPosition} <i className=\"fa fa-arrow-right\" /> {movement.position}\n                                        </div>\n                                    </div>\n                                )\n\n                            })}\n                        </div>\n                    </div> </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ChessGame;\n","import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport { NAVS } from './misc/data';\nimport './index';\n\nfunction Home() {\n  const [boundWidth, setBoundWidth] = useState(0);\n\n  useEffect(() => {\n    const elem = document.querySelector('#bound');\n\n    var rect = elem?.getBoundingClientRect();\n\n    setBoundWidth(rect?.width || 0);\n\n\n  }, [])\n  return (\n    <div className='container'>\n      <div className='row'>\n\n        {NAVS.map((nav, i) => {\n          return (\n            <div id=\"bound\" className='col-6 col-md-4 col-lg-3 mb-2'>\n\n              <Link\n                className='d-block border rounded  text-center bound-inner'\n                key={i}\n                to={nav.to}\n                style={{\n                  height: (boundWidth - 24) + 'px',\n                  verticalAlign:'bottom',\n                  background: `url('${nav.img}')`,\n                  backgroundSize:'cover'\n\n                }}\n              >\n                <div style={{visibility:'hidden'}}>{nav.name}</div>\n                <div className='bound-content p-1 bg-primary rounded text-white'>\n                  {nav.name}\n                </div>\n\n\n              </Link>\n\n\n            </div>\n          )\n\n        })}\n\n\n      </div>\n    </div>\n\n  );\n}\n\nexport default Home;\n","\nimport { CheckerPiece } from \"./CheckerPiece\";\n\nexport class PieceMovement {\n    id: number;\n    name: string;\n    icon: string;\n    isPieceWhite: boolean\n\n    prevPositionYIndex: number;\n    prevPositionXIndex: number;\n    prevPosition: string;\n    positionYIndex: number;\n    positionXIndex: number;\n    position: string;\n    jumpPosition: number[][]\n\n    constructor(\n        id: number,\n        name:string,\n        icon:string,\n        isPieceWhite:boolean,\n        prevPositionYIndex: number,\n        prevPositionXIndex: number,\n        positionYIndex: number,\n        positionXIndex: number,\n        jumpPosition: number[][] = []\n\n    ) {\n\n        this.id = id;\n        this.name = name;\n        this.icon = icon;\n        this.isPieceWhite = isPieceWhite;\n        this.prevPositionYIndex = prevPositionYIndex;\n        this.prevPositionXIndex = prevPositionXIndex;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n        this.prevPosition = `${CheckerPiece.availableXMovements[this.prevPositionXIndex]}${CheckerPiece.availableYMovements[this.prevPositionYIndex]}`\n        this.position = `${CheckerPiece.availableXMovements[this.positionXIndex]}${CheckerPiece.availableYMovements[this.positionYIndex]}`\n        this.jumpPosition = jumpPosition\n    }\n    toJSON() {\n        return [\n            this.id,\n            this.name,\n            this.icon,\n            this.isPieceWhite,\n            this.prevPositionYIndex,\n            this.prevPositionXIndex,\n            this.positionYIndex,\n            this.positionXIndex,\n            this.prevPosition,\n            this.position,\n            this.jumpPosition\n        ]\n\n    }\n    toCSV() {\n        return [\n            // this.id,\n            this.name,\n            this.isPieceWhite ? 'white' : 'black',\n            // this.prevPositionYIndex,\n            // this.prevPositionXIndex,\n            // this.positionYIndex,\n            // this.positionXIndex,\n            this.prevPosition,\n            this.position,\n\n        ]\n\n    }\n    fromJSON(el: any[]) {\n        this.id = el[0]\n        this.name = el[1]\n        this.icon = el[2]\n        this.isPieceWhite = el[3]\n        this.prevPositionYIndex = el[4]\n        this.prevPositionXIndex = el[5]\n        this.positionYIndex = el[6]\n        this.positionXIndex = el[7]\n        this.prevPosition = el[8]\n        this.position = el[9]\n        this.jumpPosition = el[10]\n\n    }\n    serialize(){\n        return [\n            this.id,\n            this.name,\n            this.icon,\n            this.isPieceWhite,\n            this.prevPositionYIndex,\n            this.prevPositionXIndex,\n            this.positionYIndex,\n            this.positionXIndex,\n            this.jumpPosition\n        ]\n    }\n\n\n\n}\n","import { devLog } from \"../../env\";\nimport { CheckerBoard } from \"./CheckerBoard\";\nimport { CheckerPawn } from \"./CheckerPawn\";\nimport { CheckerQueen } from \"./CheckerQueen\";\n\nimport { PieceMovement } from \"./PieceMovement\";\n\nexport abstract class CheckerPiece {\n    name = 'piece'\n    icon = 'chess'\n    static availableXMovements = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    static availableYMovements = ['8', '7', '6', '5', '4', '3', '2', '1'];\n\n    positionXIndex = 0;\n    positionYIndex = 0;\n    isPieceWhite = true;\n    successfulMovements = 0;\n\n    chessBoard: CheckerBoard = new CheckerBoard(true);\n    static globalId = 0\n    id = 0\n\n\n\n    constructor(\n        chessBoard: CheckerBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean,\n        ghostId?: number\n    ) {\n        if (ghostId == undefined) {\n            CheckerPiece.globalId++;\n            this.id = CheckerPiece.globalId;\n        } else {\n            this.id = ghostId\n        }\n\n\n\n        this.chessBoard = chessBoard;\n        this.isPieceWhite = isPieceWhite;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n\n    }\n\n    anticipateOppMoves = () => {\n        const _: { [id: string]: boolean } = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cellPiece = this.chessBoard.board[i][j];\n                if (cellPiece && cellPiece.isPieceWhite !== this.isPieceWhite) {\n                    cellPiece.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n    anticipateMyMoves = () => {\n        const _ = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cell = this.chessBoard.board[i][j];\n                if (cell && cell.isPieceWhite === this.isPieceWhite) {\n                    cell.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n\n    move(yIndex: number, xIndex: number, cb?: () => void) {\n        const availableMoves = this.availableMoves();\n        let canmove = false;\n        let jumpPosition: undefined | number[][] = undefined;\n        availableMoves.forEach(movements => {\n\n            if (movements.positionYIndex === yIndex && movements.positionXIndex === xIndex) {\n                canmove = true\n                jumpPosition = movements.jumpPosition;\n            }\n        })\n        const p = this.chessBoard.pieceHash[this.id];\n        const movement = new PieceMovement(p.id,p.name,p.icon,p.isPieceWhite, this.positionYIndex, this.positionXIndex, yIndex, xIndex, jumpPosition);\n\n        if (!canmove) {\n            return false;\n        }\n\n        // swap pos in board;\n        const temp = this.chessBoard.board[this.positionYIndex][this.positionXIndex]\n\n\n\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n        const previousPositionYIndex = this.positionYIndex;\n        const previousPositionXIndex = this.positionXIndex;\n        this.positionYIndex = yIndex;\n        this.positionXIndex = xIndex;\n\n        // assign new pos\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = temp;\n        // test to see if the move puts the king at risk\n\n\n        if (cb) {\n            cb()\n        }\n\n        this.successfulMovements++;\n        this.chessBoard.addToMovement(movement);\n        //devLog(movement)\n        return true;\n\n\n    }\n    availableMoves = () => {\n        return [] as {\n            positionYIndex: number;\n            positionY: string;\n            positionXIndex: number;\n            positionX: string;\n            jumpPosition?: number[][]\n        }[]\n\n    }\n\n\n    toString() {\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.isPieceWhite ? 'White' : 'Black',\n            position: `${CheckerPiece.availableXMovements[this.positionXIndex]}${CheckerPiece.availableYMovements[this.positionYIndex]}`\n        }\n            ;\n    }\n    currentPosition() {\n        return `Y = ${this.positionYIndex}, X = ${this.positionXIndex}`\n    }\n    clone = (): CheckerPiece => {\n        return null as any as CheckerPiece;\n    }\n    serialize = (toString = false) => {\n        const s = [\n            this.id,\n            this.name,\n            this.icon,\n            this.positionYIndex,\n            this.positionXIndex,\n            this.isPieceWhite,\n            this.successfulMovements,\n        ]\n        return toString ? JSON.stringify(s) : s;\n    }\n \n\n\n\n}\n","import { threadId } from \"worker_threads\";\nimport { HashIndex } from \"../../misc/data\";\nimport { CheckerBoard } from \"./CheckerBoard\";\nimport { CheckerPiece } from \"./CheckerPiece\";\n\n\n\nexport class CheckerQueen extends CheckerPiece {\n    name = 'queen'\n    icon = 'fas fa-chess-queen'\n    constructor(\n        chessBoard: CheckerBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean, ghostId?: number\n    ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite, ghostId);\n    }\n\n    availableMoves = (indexes: HashIndex = {}, id = 0, positionYIndex = this.positionYIndex, positionXIndex = this.positionXIndex, preArr = []) => {\n\n        if (id == 1) {\n            console.log({ positionYIndex, positionXIndex })\n        }\n\n\n        const inBound = (i) => i >= 0 && i <= 7\n        const addToHash = (hash, preventDFS?) => {\n            hash.id = id;\n            const key = hash.positionYIndex + ',' + hash.positionXIndex;\n            const val = indexes[key];\n            if ((val && id !== val.id) || key == this.positionYIndex + ',' + this.positionXIndex) return;\n            if (!val) {\n                indexes[key] = hash;\n\n            } else if (!val.jumpPosition || (hash.jumpPosition || []).length > val.jumpPosition.length) {\n                indexes[key] = hash;\n            } else {\n                //console.error(key,indexes)\n\n\n            }\n            if(preventDFS) return;\n            this.availableMoves(indexes, id + 1, hash.positionYIndex, hash.positionXIndex, hash.jumpPosition || [])\n\n        }\n\n        const analyzeAndBreak = (incY: number, incX: number, i: number, j: number, value: number[][] = []) => {\n\n\n            if (!inBound(incY) || !inBound(incX)) return true;\n\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                if (id != 0) return true;\n                addToHash({ positionYIndex: incY, positionXIndex: incX },true)\n\n\n\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else if (possiblePiece.isPieceWhite !== this.isPieceWhite && inBound(incY + i) && inBound(incX + j) && this.chessBoard.board[incY + i][incX + j] != null && this.chessBoard.board[incY + i][incX + j]?.isPieceWhite != this.isPieceWhite) {\n\n                return true;\n\n            }\n            else if (possiblePiece.isPieceWhite !== this.isPieceWhite && inBound(incY + i) && inBound(incX + j) && this.chessBoard.board[incY + i][incX + j] == null) {\n                // its not the same color and its possible to jump\n\n                value.push([incY, incX]);\n                addToHash({\n                    positionYIndex: incY + i,\n                    positionXIndex: incX + j,\n                    jumpPosition: [...value]\n                })\n\n\n\n            }\n\n            return false;\n        }\n\n\n        // do diagonal \n        const n1: number[][] = [...preArr];\n        for (let i = 1; i < (8 - positionYIndex); i++) {\n            const incY = positionYIndex + i;\n            const incX = positionXIndex + i;\n\n            if (analyzeAndBreak(incY, incX, 1, 1, n1)) {\n                break;\n            }\n\n        }\n        const n2: number[][] = [...preArr];\n        for (let i = 1; i < Math.max(positionYIndex, positionXIndex); i++) {\n            const incY = positionYIndex - i;\n            const incX = positionXIndex - i;\n\n\n            if (analyzeAndBreak(incY, incX, -1, -1, n2)) {\n                break;\n            }\n\n        }\n        const n3: number[][] = [...preArr];\n        for (let i = 1; i < (8 - positionYIndex); i++) {\n            const incY = positionYIndex + i;\n            const incX = positionXIndex - i;\n\n            if (analyzeAndBreak(incY, incX, 1, -1, n3)) {\n                break;\n            }\n        }\n        const n4: number[][] = [...preArr];\n        for (let i = 1; i <= positionYIndex; i++) {\n            const incY = positionYIndex - i;\n            const incX = positionXIndex + i\n\n\n            if (analyzeAndBreak(incY, incX, -1, 1, n4)) {\n                break;\n            }\n        }\n\n        return (Object.values(indexes)).map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: CheckerPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: CheckerPiece.availableXMovements[index.positionYIndex],\n                jumpPosition: index.jumpPosition\n\n            }\n        })\n    }\n\n    clone = () => {\n        return new CheckerQueen(this.chessBoard, this.positionYIndex,this.positionXIndex, this.isPieceWhite,this.id)\n    }\n\n\n}\n","import { CheckerQueen } from \"./CheckerQueen\";\nimport { CheckerPiece } from \"./CheckerPiece\";\nimport { CheckerBoard } from \"./CheckerBoard\";\nimport { HashIndex } from \"../../misc/data\";\n\nexport class CheckerPawn extends CheckerPiece {\n    name = 'pawn'\n    icon = 'fas fa-circle'\n    private _parent = CheckerPiece.prototype\n    constructor(\n        chessBoard: CheckerBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean, ghostId?: number\n    ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite, ghostId);\n    }\n\n    move = (yIndex: number, xIndex: number) => {\n\n        return this._parent.move.apply(this, [yIndex, xIndex, () => {\n            // check if its promotable\n            if (this.isPieceWhite && yIndex === 0 || !this.isPieceWhite && yIndex === 7) {\n                // promote\n                const queen = new CheckerQueen(this.chessBoard, yIndex, this.positionXIndex, this.isPieceWhite, this.id);\n\n                this.chessBoard.board[this.positionYIndex][this.positionXIndex] = queen;\n            }\n\n\n        }])\n    }\n\n    availableMoves = (indexes: HashIndex = {}, id = 0, positionYIndex = this.positionYIndex, positionXIndex = this.positionXIndex, preArr = []) => {\n\n        const movements = [\n            [1, 1],\n            [-1, -1],\n            [1, -1],\n            [-1, 1],\n        ]\n\n        const inBound = (i) => i >= 0 && i <= 7\n        const addToHash = (hash, preventDFS?) => {\n            hash.id = id;\n            const key = hash.positionYIndex + ',' + hash.positionXIndex;\n            const val = indexes[key];\n            if ( (val && id !== val.id) || key == this.positionYIndex + ',' + this.positionXIndex) return;\n            if (!val) {\n                indexes[key] = hash;\n\n            } else if (!val.jumpPosition || (hash.jumpPosition || []).length > val.jumpPosition.length) {\n                indexes[key] = hash;\n            } else {\n                //console.error(key,indexes)\n\n\n            }\n            if(preventDFS) return;\n            this.availableMoves(indexes, id + 1, hash.positionYIndex, hash.positionXIndex, hash.jumpPosition || [])\n\n        }\n\n        const analyzeAndBreak = (incY: number, incX: number, i: number, j: number, value: number[][] = []) => {\n\n            if (!inBound(incY) || !inBound(incX)) return true;\n\n\n\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                if (id != 0 || \n                    (this.isPieceWhite && positionYIndex < incY) || // avoid white pawns from going back\n                    (!this.isPieceWhite && positionYIndex > incY // avoid black bawns from going back\n                        )) return true;\n                addToHash({ positionYIndex: incY, positionXIndex: incX },true)\n\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                //   return true\n\n            } else if (possiblePiece.isPieceWhite !== this.isPieceWhite && inBound(incY + i) && inBound(incX + j) && this.chessBoard.board[incY + i][incX + j] == null) {\n                // its not the same color and its possible to jump\n                value.push([incY, incX]);\n\n                addToHash({\n                    positionYIndex: incY + i,\n                    positionXIndex: incX + j,\n                    jumpPosition: value\n                })\n\n\n\n            }\n            return false;\n        }\n\n        const n1: number[][] = [...preArr];\n        movements.forEach(curr => {\n            const incY = positionYIndex + curr[0];\n            const incX = positionXIndex + curr[1];\n\n            // check if it can move a step in y axes and if its own piece isnt on its moves\n            analyzeAndBreak(incY, incX, curr[0], curr[1], n1)\n        })\n\n        return (Object.values(indexes)).map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: CheckerPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: CheckerPiece.availableXMovements[index.positionYIndex],\n                jumpPosition: index.jumpPosition\n            }\n        })\n    }\n    clone = () => {\n        return new CheckerPawn(this.chessBoard, this.positionYIndex,this.positionXIndex, this.isPieceWhite,this.id)\n    }\n\n\n}\n","import { CheckerBoard } from \"../engine/CheckerBoard\";\nimport { CheckerPawn } from \"../engine/CheckerPawn\";\nimport { CheckerQueen } from \"../engine/CheckerQueen\";\n\nexport const checkerPieceDeSerialize = (data:  (string | number | boolean)[], board: CheckerBoard) => {\n     \n    const [\n        id,\n        name,\n        icon,\n        positionYIndex,\n        positionXIndex,\n        isPieceWhite,\n        successfulMovements,\n    ] = data;\n    let piece: CheckerPawn | CheckerQueen | null = null;\n\n    switch (name) {\n        case 'queen':\n\n            piece = new CheckerQueen(board, positionYIndex as number, positionXIndex as number, isPieceWhite as boolean, id as number)\n            break;\n        case 'pawn':\n            piece = new CheckerPawn(board, positionYIndex as number, positionXIndex as number, isPieceWhite as boolean, id as number)\n            break;\n\n        default:\n            return null\n\n    }\n\n    piece.successfulMovements = successfulMovements as number;\n    piece.icon = icon as string;\n\n    return piece;\n}","import { CheckerPiece } from \"./CheckerPiece\";\nimport { CheckerPawn } from \"./CheckerPawn\";\nimport { CheckerQueen } from \"./CheckerQueen\";\n\nimport { PieceMovement } from \"./PieceMovement\";\nimport { checkerPieceDeSerialize } from \"../misc\";\n\n\n\nexport class CheckerBoard {\n    board: CheckerPiece[][] | null[][] = CheckerBoard.newBoard();\n    isWhiteTurnToPlay = false\n    pieceHash: { [id: number]: CheckerPiece } = {}\n    killedHash: { [str: string]: CheckerPiece | null } = {}\n    private movements: PieceMovement[] = [];\n    movementIndex = 0;\n    private initiated = false;\n    constructor(dummy = false) {\n        if (this.initiated || dummy) return\n\n        this.init()\n        this.initiated = true;\n\n    }\n    init() {\n        this.board[0][0] = new CheckerPawn(this, 0, 0, false);\n        this.board[0][2] = new CheckerPawn(this, 0, 2, false);\n        this.board[0][4] = new CheckerPawn(this, 0, 4, false);\n        this.board[0][6] = new CheckerPawn(this, 0, 6, false);\n        this.board[1][1] = new CheckerPawn(this, 1, 1, false);\n        this.board[1][3] = new CheckerPawn(this, 1, 3, false);\n        this.board[1][5] = new CheckerPawn(this, 1, 5, false);\n        this.board[1][7] = new CheckerPawn(this, 1, 7, false)\n        this.board[2][0] = new CheckerPawn(this, 2, 0, false);\n        this.board[2][2] = new CheckerPawn(this, 2, 2, false);\n        this.board[2][4] = new CheckerPawn(this, 2, 4, false);\n        this.board[2][6] = new CheckerPawn(this, 2, 6, false);\n\n\n\n\n        this.board[5][1] = new CheckerPawn(this, 5, 1, true);\n        this.board[5][3] = new CheckerPawn(this, 5, 3, true);\n        this.board[5][5] = new CheckerPawn(this, 5, 5, true);\n        this.board[5][7] = new CheckerPawn(this, 5, 7, true);\n        this.board[6][0] = new CheckerPawn(this, 6, 0, true);\n        this.board[6][2] = new CheckerPawn(this, 6, 2, true);\n        this.board[6][4] = new CheckerPawn(this, 6, 4, true);\n        this.board[6][6] = new CheckerPawn(this, 6, 6, true);\n        this.board[7][1] = new CheckerPawn(this, 7, 1, true);\n        this.board[7][3] = new CheckerPawn(this, 7, 3, true);\n        this.board[7][5] = new CheckerPawn(this, 7, 5, true);\n        this.board[7][7] = new CheckerPawn(this, 7, 7, true);\n\n\n\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell) {\n                    this.pieceHash[cell.id] = cell;\n\n\n                }\n\n            }\n        }\n\n\n    }\n    static newBoard() {\n        return [\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n            [null, null, null, null, null, null, null, null],\n        ]\n    }\n\n    toString() {\n        return JSON.stringify(this.board.map(r => r.map(_ => _ ? `${_.id}-${_.name}` : 'null')));\n    }\n    clone = () => {\n        const newCheckerBoard = new CheckerBoard(true);\n        newCheckerBoard.isWhiteTurnToPlay = this.isWhiteTurnToPlay\n        newCheckerBoard.pieceHash = this.pieceHash\n        newCheckerBoard.movements = this.movements\n\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell) {\n                    newCheckerBoard.board[i][j] = cell.clone();\n\n\n                }\n\n            }\n        }\n        return newCheckerBoard;\n\n    }\n\n    canUndo() {\n        return (this.movementIndex < this.movements.length)\n    }\n    canRedo() {\n        return (this.movementIndex - 1 >= 0)\n    }\n    performUndo() {\n\n        const movement = this.movements[this.movementIndex]\n        const piece = this.board[movement.positionYIndex][movement.positionXIndex];\n\n        if (!piece) return;\n\n        piece.positionYIndex = movement.prevPositionYIndex;\n        piece.positionXIndex = movement.prevPositionXIndex;\n\n        this.board[movement.positionYIndex][movement.positionXIndex] = null;\n        this.board[movement.prevPositionYIndex][movement.prevPositionXIndex] = piece;\n        movement.jumpPosition.forEach(pos => {\n            this.board[pos[0]][pos[1]] = this.killedHash[pos[0] + ',' + pos[1]];\n        })\n        this.movementIndex++;\n    }\n    performRedo() {\n        this.movementIndex--;\n\n        const movement = this.movements[this.movementIndex]\n        const piece = this.board[movement.prevPositionYIndex][movement.prevPositionXIndex];\n        if (!piece) return;\n        this.board[movement.prevPositionYIndex][movement.prevPositionXIndex] = null;\n\n        piece.positionYIndex = movement.positionYIndex;\n        piece.positionXIndex = movement.positionXIndex;\n\n        this.board[movement.positionYIndex][movement.positionXIndex] = piece;\n        movement.jumpPosition.forEach(pos => {\n            this.board[pos[0]][pos[1]] = null;\n        })\n    }\n    addToMovement(movement: PieceMovement) {\n        const n = this.getMovements();\n        n.unshift(movement);\n        this.movements = n;\n        this.movementIndex = 0;\n\n    }\n    getMovements() {\n        return this.movements.slice(this.movementIndex);\n    }\n\n    serialize = (toString = false) => {\n        const board = this.board.map((row: CheckerPiece[] | null[]) => row.map((piece: CheckerPiece | null) => piece == null ? null : piece.serialize()))\n        const movements = this.movements.map(m => m.serialize());\n        const movementIndex = this.movementIndex;\n        const isWhiteTurnToPlay = this.isWhiteTurnToPlay;\n        const killedHash = Object.values(this.killedHash).map((piece: CheckerPiece | null) => piece ? piece.serialize() : null)\n\n        const data = [board, movements, movementIndex, isWhiteTurnToPlay, killedHash]\n\n\n        return toString ? JSON.stringify(data) : data;\n    }\n    static deSerialize = (str: string) => {\n        const checkerBoard = new CheckerBoard(true);\n        const data: (number | boolean | PieceMovement[] | (string | (string | number | boolean)[])[] | (string | (string | number | boolean)[])[][])[] = JSON.parse(str);\n\n        const [_board, _movements, _movementIndex, _isWhiteTurnToPlay, _killedHash] = data;\n        const board = (_board as (string | (string | number | boolean)[] | null)[][]).map((row) => row.map((_piece) => {\n\n\n            if (_piece == null) return null;\n\n            const piece = checkerPieceDeSerialize(_piece as any, checkerBoard);\n            if (piece == null) return null;\n            checkerBoard.pieceHash[piece.id] = piece\n\n            return piece;\n\n        }))\n        const movements = (_movements as any[][]).map(m => new PieceMovement(m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8]));\n        const movementIndex = _movementIndex as number;\n        const isWhiteTurnToPlay = _isWhiteTurnToPlay as boolean;\n        const killedHash: { [str: string]: CheckerPiece | null } = {};\n\n        (_killedHash as (string | (string | number | boolean)[] | null)[])\n            .forEach((_piece) => {\n\n\n                if (_piece != null) {\n\n                    const piece = checkerPieceDeSerialize(_piece as any, checkerBoard)\n                    if (piece == null) return;\n                    killedHash[piece?.positionYIndex + ',' + piece?.positionXIndex] = piece\n\n                }\n            })\n\n\n        checkerBoard.board = board as any;\n        checkerBoard.movements = movements\n        checkerBoard.movementIndex = movementIndex\n        checkerBoard.isWhiteTurnToPlay = isWhiteTurnToPlay\n        checkerBoard.killedHash = killedHash\n\n        return checkerBoard;\n    }\n}\n\n\n\n\n","import { useEffect, useRef, useState } from \"react\";\nimport { CheckerBoard } from \"./engine/CheckerBoard\";\nimport './Checkers.css';\nimport { CheckerPiece } from \"./engine/CheckerPiece\";\n\nimport { devLog } from '../env'\nimport { PieceMovement } from \"./engine/PieceMovement\";\nimport { csvGenerator } from \"../misc/functions\";\nimport { f } from \"../misc/data\";\n\n\n\n\nfunction CheckersGame() {\n    const [size, setSize] = useState({\n        boardWidth: f(),\n        pieceWidth: (f()) / 8\n    })\n    const [board, setBoard] = useState([] as CheckerPiece[][] | null[][])\n    const [movementHistory, setMovementHistory] = useState([] as PieceMovement[])\n    const [availableMoves, setAvailableMoves] = useState({} as { [id: string]: number[][] })\n    const [selectedPiece, setSelectedPiece] = useState(null as CheckerPiece | null)\n\n    const checkerBoardRef = useRef(null as any as CheckerBoard);\n\n    const [isWhiteTurnToPlay, setIsWhiteTurnToPlay] = useState(true);\n    const [{ canUndo, canRedo }, setUndoAndRedo] = useState({ canUndo: false, canRedo: false });\n\n\n    function reloadBoard() {\n        checkerBoardRef.current.isWhiteTurnToPlay = !checkerBoardRef.current.isWhiteTurnToPlay\n        setBoard(checkerBoardRef.current.board)\n        setMovementHistory(checkerBoardRef.current.getMovements())\n        setAvailableMoves({});\n        setSelectedPiece(null);\n        setIsWhiteTurnToPlay(checkerBoardRef.current.isWhiteTurnToPlay)\n        setUndoAndRedo({ canRedo: checkerBoardRef.current.canRedo(), canUndo: checkerBoardRef.current.canUndo() })\n    }\n    function init() {\n        checkerBoardRef.current = new CheckerBoard();\n\n        reloadBoard()\n    }\n\n\n    useEffect(() => {\n        init()\n        const cb = () => {\n            const boardWidth = f()\n            const pieceWidth = boardWidth / 8;\n\n            setSize(\n                {\n                    boardWidth,\n                    pieceWidth\n                }\n            )\n\n        }\n        window.addEventListener('resize', cb)\n        return () => {\n            window.removeEventListener('resize', cb)\n        }\n\n\n    }, [])\n\n    function onPieceClick(piece: CheckerPiece | null, y: number, x: number) {\n\n        if (availableMoves[y + \",\" + x]) {\n            if (!selectedPiece?.move(y, x)) {\n                // invalid move\n                return;\n            }\n\n            const possibleJump = availableMoves[y + \",\" + x];\n\n\n            possibleJump.forEach(([y, x]) => {\n                checkerBoardRef.current.killedHash[y + ',' + x] = checkerBoardRef.current.board[y][x];\n                checkerBoardRef.current.board[y][x] = null;\n            })\n\n\n\n\n            reloadBoard()\n\n\n\n\n        } else if (piece) {\n            //devLog(piece.toString())\n            if (isWhiteTurnToPlay !== piece.isPieceWhite) {\n                setAvailableMoves({});\n                setSelectedPiece(null);\n                return;\n            }\n\n\n            // show available moves\n            const a = piece.availableMoves();\n            //console.log(a)\n\n            const _: { [id: string]: number[][] } = {}\n            a.forEach(m => {\n                const val = m.jumpPosition == undefined ? [] : m.jumpPosition;\n\n                _[m.positionYIndex + \",\" + m.positionXIndex] = val\n            });\n\n            setAvailableMoves(_);\n            setSelectedPiece(piece);\n\n        } else {\n            setAvailableMoves({});\n            setSelectedPiece(null);\n        }\n\n    }\n    function performRedo() {\n        checkerBoardRef.current.performRedo();\n        reloadBoard()\n    }\n    function performUndo() {\n        checkerBoardRef.current.performUndo();\n        reloadBoard()\n    }\n    function save(){\n        const data = checkerBoardRef.current.serialize(true);\n        // @ts-ignore\n        localStorage.setItem(\"checkers\",data);\n    }\n    function restore(){\n        const data = localStorage.getItem(\"checkers\");\n        if(!data) return;\n        const board = CheckerBoard.deSerialize(data)\n        board.isWhiteTurnToPlay = !board.isWhiteTurnToPlay\n\n        checkerBoardRef.current = board;\n        reloadBoard()\n\n    }\n\n    return (\n        <div className=\"Whole-Body\">\n\n            <div className=\"Chess-Field\">\n                <div className=\"Chess-Pre-Playable\">\n\n                    <div className=\"Chess-Playable\">\n\n                        <div className='Board' style={{ width: size.boardWidth + 'px', height: size.boardWidth + 'px' }} >\n\n                            {board.map((row: CheckerPiece[] | null[], y: number) => {\n\n                                return (<div key={y} className='Board-Y' style={{ display: 'flex' }}>\n\n\n\n                                    {row.map((piece: CheckerPiece | null, x: number) => {\n\n                                        const shouldHighlight = availableMoves[y + \",\" + x];\n                                        return (<div onClick={() => onPieceClick(piece, y, x)} key={x} className='Board-X' style={{ width: size.pieceWidth + 'px', height: size.pieceWidth + 'px', backgroundColor: (x % 2 === 0) === (y % 2 === 0) ? 'rgba(245, 222, 179, 0.596)' : '' }}>\n                                            <div className={!piece ? '' : (isWhiteTurnToPlay !== piece.isPieceWhite) ? 'Piece-inner-invalid' : 'Piece-inner-valid'} style={{ width: '70%', height: '70%', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: !(shouldHighlight || piece && piece === selectedPiece) ? '' : 'rgba(255, 255, 0, 0.5)' }}>\n                                                {piece ? <i className={piece.icon} style={{ color: (piece.isPieceWhite ? \"white\" : \"black\") }} ></i> : ''}\n\n                                            </div>\n                                        </div>\n\n\n                                        )\n                                    })}\n\n\n\n                                </div>\n\n\n                                )\n                            })}\n                        </div>\n\n                    </div>\n\n                    <div className=\"text-center\">\n                        {canUndo && <button onClick={performUndo} className=\"m-2\">  <i className=\"fa fa-undo\" /></button>}\n                        {canRedo && <button onClick={performRedo} className=\"m-2\">  <i className=\"fa fa-redo\" /></button>}\n\n\n                    </div>\n                </div>\n                <div className='Side' style={{ padding: '10px' }} >\n                    <div className='' style={{ padding: '0 30px' }} >\n                        Piece To Play\n                        <br />\n                        <i className={'fa fa-circle '} style={{ color: isWhiteTurnToPlay ? 'white' : 'black' }} ></i>\n                        <hr />\n                        <div style={{ textAlign: 'center' }}>\n                        <button onClick={save}><i className=\"fa fa-save\" /></button>\n                        <button onClick={restore}><i className=\"fa fa-upload\" /></button>\n                            {movementHistory.length != 0 && <>\n                                <button onClick={() => { csvGenerator(movementHistory as any) }}><i className=\"fa fa-file-download\" /></button>\n                                <br />\n                            </>}\n                            {movementHistory.map((movement, key) => {\n\n                                return (\n                                    <div style={{ fontSize: '13px', marginBottom: '5px', display: 'flex', justifyContent: 'center' }} key={key}>\n                                        <div style={{ marginRight: '5px' }}>\n                                            <i className={movement.icon} style={{ color: movement.isPieceWhite ? 'white' : 'black' }} />\n                                        </div>\n                                        <div>\n                                            {movement.prevPosition} <i className=\"fa fa-arrow-right\" /> {movement.position}\n                                        </div>\n                                    </div>\n                                )\n\n                            })}\n                        </div>\n                    </div> </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CheckersGame;\n","import { useEffect, useRef, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\n\nfunction NavBar() {\n    const history = useHistory();\n\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <span>\n                {history.location.pathname != '/' && <span onClick={()=>history.goBack()}  style={{width:'50px',cursor:'pointer'}}  className=\"text-center d-inline-block\">\n                    <i className=\"fa fa-arrow-left\"> </i>\n                </span>}\n\n                <Link className=\"navbar-brand\" to=\"/\">\n                    <div style={{width:'50px'}} className=\"d-inline-block text-center\" >\n                    <img src=\"favicon.png\" width=\"25\" height=\"25\"   className=\"align-top\" alt=\"\" />\n                    </div>\n                 \n                    <span className=\" d-inline-block\">\n                    Games\n                    </span>\n                </Link>\n            </span>\n        </nav>\n    )\n\n}\n\nexport default NavBar;\n","export function gridToPosition(gridX: number, gridY: number) {\n    return {x:gridX * 20,y: gridY * 20};\n}\n\nexport function clear(canvas:HTMLCanvasElement,ctx:CanvasRenderingContext2D){\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n}","import {gridToPosition} from \"../util\";\nimport {Position} from \"../types\";\nimport Item from \"./Item\";\n\nclass Wall extends Item{\n    private ctx: CanvasRenderingContext2D;\n    private horizontal = false;\n\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined, horizontal = false) {\n        super();\n        this.ctx = ctx;\n        this.horizontal = horizontal || false;\n        if (position) this.style.position = position\n        else this.style.position = gridToPosition(gridX, gridY);\n        if (horizontal) {\n            const temp = this.style.dimensions.width;\n            this.style.dimensions.width = this.style.dimensions.height;\n            this.style.dimensions.height = temp;\n        }\n\n        this.draw.all();\n        this.calculateBoundaries()\n\n    }\n    public updateGrid(gridX: number, gridY: number) {\n        this.style.position = gridToPosition(gridX, gridY);\n        this.draw.all();\n        this.calculateBoundaries()\n\n    }\n    private draw = {\n        rect: () => {\n            this.ctx.beginPath();\n\n            this.ctx.strokeStyle = this.style.color;\n            this.ctx.strokeRect(\n                this.style.position.x,\n                this.style.position.y,\n                this.style.dimensions.width,\n                this.style.dimensions.height,\n            );\n\n            this.ctx.fill();\n\n        },\n        lines: () => {\n            const noOfLines = 10;\n            if (!this.horizontal) {\n                const diff = this.style.dimensions.height / noOfLines;\n                for (let i = 0; i < noOfLines; i++) {\n                    const _height = (this.style.dimensions.width / 2) + (i * diff);\n\n                    const heightWithPosition = _height + this.style.position.y;\n                    const widthWithPosition = this.style.position.x + this.style.dimensions.width\n\n                    if (_height > this.style.dimensions.height) {\n\n                    }\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = this.style.color;\n                    this.ctx.moveTo(this.style.position.x, this.style.position.y + (i * diff));\n                    this.ctx.lineTo(widthWithPosition, heightWithPosition);\n\n                    this.ctx.stroke();\n                }\n            } else {\n                const diff = this.style.dimensions.width / noOfLines;\n                for (let i = 0; i < noOfLines; i++) {\n                    const _width = (this.style.dimensions.height / 2) + (i * diff);\n\n                    const widthWithPosition = _width + this.style.position.x;\n                    const heightWithPosition = this.style.position.y + this.style.dimensions.height\n\n                    if (_width > this.style.dimensions.width) {\n\n                    }\n                    this.ctx.beginPath();\n                    this.ctx.strokeStyle = this.style.color;\n                    this.ctx.moveTo(this.style.position.x + (i * diff), this.style.position.y);\n                    this.ctx.lineTo(widthWithPosition, heightWithPosition);\n\n                    this.ctx.stroke();\n                }\n            }\n\n        },\n        all: () => {\n\n            this.draw.rect();\n            this.draw.lines();\n        }\n    }\n\n}\n\nexport class HWall extends Wall {\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined) {\n        super(ctx, gridX, gridY, position, true)\n    }\n\n}\nexport class VWall extends Wall {\n    constructor(ctx: CanvasRenderingContext2D, gridX: number = 0, gridY: number = 0, position: Position | undefined = undefined) {\n        super(ctx, gridX, gridY, position, false)\n    }\n\n}\n","export default class Item{\n    protected style = {\n        position: {\n            x: 0,\n            y: 0\n        },\n        dimensions: {\n            width: 20,\n            height: 100\n        },\n        color: 'black'\n    }\n    protected boundaries = [\n        [0,0],[0,0],\n        [0,0],[0,0],\n    ]\n\n    public  getBoundaries(){\n        return this.boundaries;\n    }\n    public isWithinBoundary (grid:number[][]){\n\n        return false;\n\n    }\n    public  calculateBoundaries(){\n        this.boundaries[0][0] = this.style.position.x;\n        this.boundaries[0][1] = this.style.position.y;\n\n        this.boundaries[1][0] = this.style.position.x + this.style.dimensions.width;\n        this.boundaries[1][1] = this.style.position.y;\n\n        this.boundaries[2][0] = this.style.position.x;\n        this.boundaries[2][1] = this.style.position.y + this.style.dimensions.height;\n\n        this.boundaries[3][0] = this.style.position.x + this.style.dimensions.width;\n        this.boundaries[3][1] = this.style.position.y + this.style.dimensions.height;\n\n    }\n}","import {VWall,HWall} from \"../models/Wall\";\n\nexport default class Scene1{\n    pos = {\n        x: 5,\n        y: 5,\n    }\n    scene:(VWall | HWall | null)[][] = [];\n    private ctx: CanvasRenderingContext2D;\n    \n    constructor(ctx: CanvasRenderingContext2D) {\n        this.ctx = ctx;\n\n        \n        this.scene = [\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (0 * 5)), new HWall(this.ctx, this.pos.x + (0 * 5), this.pos.y + (0 * 5)), new HWall(this.ctx, this.pos.x + (1 * 5), this.pos.y + (0 * 5)), new HWall(this.ctx, this.pos.x + (2 * 5), this.pos.y + (0 * 5)), new VWall(this.ctx, this.pos.x + (2.8 * 5), this.pos.y + (0 * 5))],\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (1 * 5)), null, null, new VWall(this.ctx, this.pos.x + (2.8 * 5), this.pos.y + (1 * 5))],\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (2 * 5)), null, null, new VWall(this.ctx, this.pos.x + (2.8 * 5), this.pos.y + (2 * 5))],\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (3 * 5)), null, null, new VWall(this.ctx, this.pos.x + (2.8 * 5), this.pos.y + (3 * 5))],\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (4 * 5)), null, null, new VWall(this.ctx, this.pos.x + (2.8 * 5), this.pos.y + (4 * 5))],\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (5 * 5)), null, null, new VWall(this.ctx, this.pos.x + (2.8 * 5), this.pos.y + (5 * 5))],\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (6 * 5)), null, null, new VWall(this.ctx, this.pos.x + (2.8 * 5), this.pos.y + (6 * 5))],\n            [new VWall(this.ctx, this.pos.x, this.pos.y + (7 * 5)), new HWall(this.ctx, this.pos.x + (0 * 5), this.pos.y + (8 * 5)), new HWall(this.ctx, this.pos.x + (1 * 5), this.pos.y + (8 * 5)), new HWall(this.ctx, this.pos.x + (2 * 5), this.pos.y + (8 * 5)), new VWall(this.ctx, this.pos.x + (2.8 * 5), this.pos.y + (7 * 5))],\n\n        ]\n\n        this.scene.forEach((row) => {\n            row.forEach(el => {\n                if (!el) {\n                    return\n                }\n            })\n        })\n\n    }\n}","import Scene1 from \"./scenes/Scene1\";\n\nfunction drawLines(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, horizontal = true) {\n    const size = 20;\n    let totalDrawn = 0;\n    let group = 0;\n    const boundary = (horizontal ? canvas.height : canvas.width);\n    while (totalDrawn < boundary) {\n        ctx.beginPath();\n        if (horizontal) {\n            ctx.moveTo(0, totalDrawn);\n            ctx.lineTo(canvas.width, totalDrawn);\n        } else {\n            ctx.moveTo(totalDrawn, 0);\n            ctx.lineTo(totalDrawn, canvas.height);\n        }\n\n        if (totalDrawn == 0 || group == 3) {\n            ctx.lineWidth = 3;\n            ctx.strokeStyle = \"#c2a667\";\n            //ctx.strokeStyle = \"red\";\n            group = 0;\n        } else {\n            ctx.lineWidth = 1;\n            ctx.strokeStyle = \"#c1a46a\"\n        }\n        ctx.stroke();\n        totalDrawn += size;\n        group++;\n    }\n\n\n}\n\n\nexport const draw = (canvas: HTMLCanvasElement | null) => {\n    if (!canvas) return;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    canvas.width = 1000;\n    canvas.height = 1000;\n\n    // Add behind elements.\n    ctx.globalCompositeOperation = 'destination-under'\n    // Now draw!\n    ctx.fillStyle = \"#e3ca8c\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    drawLines(canvas, ctx, true)\n    drawLines(canvas, ctx, false)\n\n    new Scene1(ctx)\n\n};\n\n\n\n","import './StolenIn60Seconds.css';\nimport {useEffect, useRef} from \"react\";\nimport {draw} from \"./misc/draw\";\n\n\nfunction StolenIn60SecondsGame() {\n    const canvasRef = useRef<HTMLCanvasElement>(null)\n\n    useEffect(()=>{\n        draw(canvasRef.current)\n    },[])\n    return (\n        <div className=\"StolenIn60SecondsGame\">\n            <canvas ref={canvasRef}></canvas>\n\n        </div>\n    );\n}\n\nexport default StolenIn60SecondsGame;\n","import logo from './logo.svg';\nimport { BrowserRouter, Link, Redirect, Route, Router, Switch } from 'react-router-dom'\nimport ChessGame from './chess';\nimport Home from './Home';\nimport CheckersGame from './checkers';\nimport NavBar from './misc/Navbar';\nimport {useContext, useState} from \"react\";\nimport {StateContext, StateProvider} from \"./misc/StateProvider\";\nimport StolenIn60SecondsGame from \"./StolenIn60Seconds\";\n\nfunction App() {\n  const {showNav, setShowNav} = useContext(StateContext);\n\n  return (\n\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <NavBar/>\n      <Switch>\n        <Route path=\"/chess\" component={ChessGame} />\n        <Route path=\"/checkers\" component={CheckersGame} />\n        <Route path=\"/stolen-in-60-seconds\" component={StolenIn60SecondsGame} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {StateProvider} from \"./misc/StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <StateProvider>\n\n      <App />\n      </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}