{"version":3,"sources":["env.ts","chess/engine/PieceMovement.ts","chess/engine/ChessPiece.ts","chess/engine/ChessQueen.ts","chess/engine/ChessPawn.ts","chess/engine/ChessBishop.ts","chess/engine/ChessRook.ts","chess/engine/ChessKing.ts","chess/engine/ChessKnight.ts","chess/engine/ChessBoard.ts","chess/misc/Bar.tsx","chess/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LOGGING","process","production","devLog","o","console","error","PieceMovement","id","prevPositionYIndex","prevPositionXIndex","positionYIndex","positionXIndex","this","ChessPiece","chessBoard","isPieceWhite","ghostId","name","icon","successfulMovements","ChessBoard","king","oppKing","anticipateOppMoves","_","i","board","length","j","cellPiece","availableMoves","forEach","m","anticipateMyMoves","cell","undefined","globalId","yIndex","xIndex","cb","movement","canmove","movements","temp","previousPositionYIndex","previousPositionXIndex","alert","history","push","type","position","availableXMovements","availableYMovements","ChessQueen","indexes","analyzeAndBreak","incY","incX","possiblePiece","Math","max","map","index","positionY","positionX","ChessPawn","_parent","prototype","move","apply","queen","incY1","incY2","ChessBishop","ChessRook","ChessKing","curr","ChessKnight","dummy","isWhiteTurnToPlay","pieceHash","initiated","init","blackKing","whiteKing","JSON","stringify","r","Bar","pieceWidth","horizontal","arr","className","c","x","style","width","height","f","min","window","innerHeight","innerWidth","ChessGame","useState","boardWidth","size","setSize","setBoard","setAvailableMoves","selectedPiece","setSelectedPiece","chessBoardRef","useRef","setIsWhiteTurnToPlay","reloadBoard","current","useEffect","addEventListener","removeEventListener","row","y","display","piece","shouldHighlight","onClick","toString","a","onPieceClick","backgroundColor","justifyContent","alignItems","color","padding","App","basename","path","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abf4c93a.chunk.js","sourcesContent":["export const LOGGING = true && !process.env.production;\nexport const devLog = (o)=> {\n    if(!LOGGING) return;\n    console.error(o)\n\n}","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessKing } from \"./ChessKing\";\n\nexport  class PieceMovement {\n    id: number;\n    prevPositionYIndex: number;\n    prevPositionXIndex: number;\n    positionYIndex: number;\n    positionXIndex: number;\n\n    constructor(\n        id: number,\n        prevPositionYIndex: number,\n        prevPositionXIndex: number,\n        positionYIndex: number,\n        positionXIndex: number,\n\n    ) {\n\n        this.id = id;\n        this.prevPositionYIndex = prevPositionYIndex;\n        this.prevPositionXIndex = prevPositionXIndex;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n\n    }\n      \n\n\n}\n","import { devLog } from \"../../env\";\nimport { ChessBoard } from \"./ChessBoard\";\nimport { ChessKing } from \"./ChessKing\";\nimport { PieceMovement } from \"./PieceMovement\";\n\nexport abstract class ChessPiece {\n    name = 'piece'\n    icon = 'chess'\n    static availableXMovements = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n    static availableYMovements = ['8', '7', '6', '5', '4', '3', '2', '1'];\n\n    positionXIndex = 0;\n    positionYIndex = 0;\n    isPieceWhite = true;\n    successfulMovements = 0;\n\n    chessBoard: ChessBoard = new ChessBoard(true);\n    static globalId = 0\n    id = 0\n\n    king: ChessKing | null = null;\n    oppKing: ChessKing | null = null;\n\n    constructor(\n        chessBoard: ChessBoard,\n        positionYIndex: number,\n        positionXIndex: number,\n        isPieceWhite: boolean,\n        ghostId?: number\n    ) {\n        if (ghostId == undefined) {\n            ChessPiece.globalId++;\n            this.id = ChessPiece.globalId;\n        } else {\n            this.id = ghostId\n        }\n\n\n\n        this.chessBoard = chessBoard;\n        this.isPieceWhite = isPieceWhite;\n        this.positionYIndex = positionYIndex;\n        this.positionXIndex = positionXIndex;\n\n    }\n\n    anticipateOppMoves = () => {\n        const _: { [id: string]: boolean } = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cellPiece = this.chessBoard.board[i][j];\n                if (cellPiece && cellPiece.isPieceWhite !== this.isPieceWhite) {\n                    cellPiece.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n    anticipateMyMoves = () => {\n        const _ = {}\n        for (let i = 0; i < this.chessBoard.board.length; i++) {\n            for (let j = 0; j < this.chessBoard.board[i].length; j++) {\n                const cell = this.chessBoard.board[i][j];\n                if (cell && cell.isPieceWhite === this.isPieceWhite) {\n                    cell.availableMoves()\n                        .forEach(m => {\n                            _[m.positionYIndex + \",\" + m.positionXIndex] = true\n                        })\n                }\n\n            }\n        }\n        return _;\n    }\n\n    move(yIndex: number, xIndex: number, cb?: () => void) {\n        const movement = new PieceMovement(this.id, this.positionYIndex, this.positionXIndex, yIndex, xIndex);\n        const availableMoves = this.availableMoves();\n        let canmove = false;\n        availableMoves.forEach(movements => {\n\n            if (movements.positionYIndex === yIndex && movements.positionXIndex === xIndex) {\n                canmove = true;\n            }\n        })\n\n        if (!canmove) {\n            return false;\n        }\n        // swap pos in board;\n        const temp = this.chessBoard.board[this.positionYIndex][this.positionXIndex]\n\n\n\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n        const previousPositionYIndex = this.positionYIndex;\n        const previousPositionXIndex = this.positionXIndex;\n        this.positionYIndex = yIndex;\n        this.positionXIndex = xIndex;\n\n        // assign new pos\n        this.chessBoard.board[this.positionYIndex][this.positionXIndex] = temp;\n        // test to see if the move puts the king at risk\n        const oppMoves = this.anticipateOppMoves();\n        if (oppMoves[this.king?.positionYIndex + ',' + this.king?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('king at risk')\n\n            this.chessBoard.board[this.positionYIndex][this.positionXIndex] = null;\n\n            this.positionYIndex = previousPositionYIndex;\n            this.positionXIndex = previousPositionXIndex;\n\n            this.chessBoard.board[previousPositionYIndex][previousPositionXIndex] = temp;\n\n\n            return false;\n        }\n        const myMoves = this.anticipateMyMoves();\n        if (myMoves[this.oppKing?.positionYIndex + ',' + this.oppKing?.positionXIndex]) {\n            // king is at risk\n            // revert move\n            alert('check')\n\n\n\n        }\n\n        if (cb) {\n            cb()\n        }\n\n        this.successfulMovements++;\n        this.chessBoard.history.push(movement);\n        devLog(movement)\n        return true;\n\n\n    }\n    availableMoves = () => {\n        return [] as {\n            positionYIndex: number;\n            positionY: string;\n            positionXIndex: number;\n            positionX: string;\n        }[]\n\n    }\n\n    toString() {\n        return {\n            id: this.id,\n            name: this.name,\n            type: this.isPieceWhite ? 'White' : 'Black',\n            position: `${ChessPiece.availableXMovements[this.positionXIndex]}${ChessPiece.availableYMovements[this.positionYIndex]}`\n        }\n            ;\n    }\n    currentPosition() {\n        return `Y = ${this.positionYIndex}, X = ${this.positionXIndex}`\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessQueen extends ChessPiece {\n    name = 'queen'\n    icon = 'fas fa-chess-queen'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex + i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex -i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n            for (let i = 1; i < (8-this.positionYIndex); i++) {\n                const incY = this.positionYIndex + i;\n                const incX = this.positionXIndex - i;\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = 1; i <= this.positionYIndex; i++) {\n                const incY = this.positionYIndex - i;\n                const incX = this.positionXIndex + i\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n        \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessQueen } from \"./ChessQueen\";\nimport { ChessPiece } from \"./ChessPiece\";\nimport { ChessBoard } from \"./ChessBoard\";\n\nexport class ChessPawn extends ChessPiece {\n    name = 'pawn'\n    icon = 'fas fa-chess-pawn'\n    _parent = ChessPiece.prototype\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite,ghostId);\n    }\n\n    move = (yIndex:number, xIndex:number) => {\n\n        return this._parent.move.apply(this, [yIndex, xIndex, () => {\n            // check if its promotable\n            if (this.isPieceWhite && yIndex === 0 || !this.isPieceWhite && yIndex === 7) {\n                // promote\n                const queen = new ChessQueen(this.chessBoard, yIndex, this.positionXIndex, this.isPieceWhite,this.id);\n                queen.king = this.king;\n                queen.oppKing = this.oppKing;\n                this.chessBoard.board[this.positionYIndex][this.positionXIndex] = queen;\n            }\n\n\n        }])\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n        }[] = [];\n        const incY1 = !this.isPieceWhite ? 1 : -1;\n        const incY2 = !this.isPieceWhite ? 2 : -2;\n\n\n\n\n        // check if it can move a step in y axes and if its own piece isnt on its moves\n        if (this.positionYIndex + incY1 < ChessPiece.availableXMovements.length && this.positionYIndex + incY1 >= 0 && !this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex]) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex })\n\n            if (this.successfulMovements === 0) {\n                // check if its first time, only move if theres nothing in the way\n\n                if (this.positionYIndex + incY2 < ChessPiece.availableYMovements.length && this.positionYIndex + incY2 >= 0 && !this.chessBoard.board[this.positionYIndex + incY2][this.positionXIndex]) {\n                    indexes.push({ positionYIndex: this.positionYIndex + incY2, positionXIndex: this.positionXIndex })\n\n                }\n            }\n\n\n\n        }\n\n\n\n    \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length && this.positionYIndex + incY1 >= 0  && this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex + 1] &&this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex + 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex + 1 })\n            // check diagonal if an opp is there\n        }\n \n        if (this.positionYIndex + incY1 < ChessPiece.availableYMovements.length  && this.positionYIndex + incY1 >= 0 && this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex - 1] &&this.chessBoard.board[this.positionYIndex + incY1][this.positionXIndex - 1]?.isPieceWhite === !this.isPieceWhite) {\n            indexes.push({ positionYIndex: this.positionYIndex + incY1, positionXIndex: this.positionXIndex - 1 })\n            // check diagonal if an opp is there\n        }\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessBishop extends ChessPiece {\n    name = 'bishop'\n    icon = 'fas fa-chess-bishop'\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard, positionYIndex, positionXIndex, isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY, incX) => {\n            if (incY < 0 || incY > 7 || incX < 0 || incX > 7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n\n        // do diagonal \n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex + i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i < Math.max(this.positionYIndex, this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex - i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n        for (let i = 1; i < (8 - this.positionYIndex); i++) {\n            const incY = this.positionYIndex + i;\n            const incX = this.positionXIndex - i;\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n        for (let i = 1; i <= Math.max(this.positionYIndex,this.positionXIndex); i++) {\n            const incY = this.positionYIndex - i;\n            const incX = this.positionXIndex + i\n\n\n            if (analyzeAndBreak(incY, incX)) {\n                break;\n            }\n        }\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessRook extends ChessPiece {\n    name = 'rook'\n    icon = 'fas fa-chess-rook'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n            for (let i = this.positionYIndex + 1; i < 8; i++) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionYIndex - 1; i >= 0; i--) {\n                const incY = i;\n                const incX = this.positionXIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex + 1; i < 8; i++) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n            for (let i = this.positionXIndex - 1; i >= 0; i--) {\n                const incX = i;\n                const incY = this.positionYIndex\n               \n\n                if (analyzeAndBreak( incY,incX)) {\n                    break;\n                }\n            }\n\n            // do diagonal \n\n\n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKing extends ChessPiece {\n    name = 'king'\n    icon = 'fas fa-chess-king'\n    constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n           \n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n      \n    }\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n                return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [1,0],\n            [0,1],\n            [-1,0],\n            [0,-1],\n\n            [1,1],\n            [-1,-1],\n            [-1,1],\n            [1,-1],\n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n}\n","import { ChessBoard } from \"./ChessBoard\";\nimport { ChessPiece } from \"./ChessPiece\";\n\nexport class ChessKnight extends ChessPiece {\n    name = 'knight'\n    icon = 'fas fa-chess-knight'\n     constructor(\n        chessBoard:ChessBoard,\n        positionYIndex:number,\n        positionXIndex:number,\n        isPieceWhite:boolean,ghostId?:number\n        ) {\n        super(chessBoard,positionYIndex, positionXIndex,isPieceWhite,ghostId);\n\n    }\n\n\n\n    availableMoves = () => {\n        let indexes:{\n            positionYIndex:number\n            positionXIndex:number\n\n\n        }[] = [];\n\n        // check up\n\n\n\n\n        const analyzeAndBreak = (incY,incX) => {\n   \n            if(incY < 0 || incY > 7 || incX < 0 || incX >7) return true;\n           \n          \n           \n            const possiblePiece = this.chessBoard.board[incY][incX]\n            if (!possiblePiece) {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n            } else if (possiblePiece.isPieceWhite === this.isPieceWhite) {\n                // if its same color\n             //   return true\n\n            } else {\n                indexes.push({ positionYIndex: incY, positionXIndex: incX })\n\n                return true\n\n            }\n        }\n\n\n\n       \n        const movements = [\n            [2,1],\n            [2,-1],\n            [-2,1],\n            [-2,-1],\n            [1,2],\n            [1,-2],\n            [-1,2],\n            [-1,-2],\n      \n\n\n\n        ]\n        \n\n\n            for (let i = 0; i < movements.length; i++) {\n                const curr = movements[i]\n                const incY = this.positionYIndex + curr[0];\n                const incX = this.positionXIndex + curr[1];\n               \n\n                analyzeAndBreak( incY,incX)\n            }\n          \n\n\n\n\n\n\n\n        return indexes.map(index => {\n            return {\n\n                positionYIndex: index.positionYIndex,\n                positionY: ChessPiece.availableYMovements[index.positionYIndex],\n                positionXIndex: index.positionXIndex,\n                positionX: ChessPiece.availableXMovements[index.positionYIndex]\n            }\n        })\n    }\n\n\n\n}\n","import { ChessPawn } from \"./ChessPawn\";\nimport { ChessQueen } from \"./ChessQueen\";\nimport { ChessBishop } from \"./ChessBishop\";\nimport { ChessRook } from \"./ChessRook\";\nimport { ChessKing } from \"./ChessKing\";\nimport { ChessKnight } from \"./ChessKnight\";\nimport { ChessPiece } from \"./ChessPiece\";\nimport { PieceMovement } from \"./PieceMovement\";\n\n\n\nexport class ChessBoard {\n    board:ChessKing[][] | null[][] = [\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n        [null, null, null, null, null, null, null, null],\n    ]\n    isWhiteTurnToPlay = false\n    pieceHash: {[id:number]:ChessPiece} = {}\n    history:PieceMovement[] = []\n    private initiated = false;\n    constructor(dummy=false) {\n        if(this.initiated || dummy) return\n    \n        this.init()\n        this.initiated = true;\n\n    }\n    init() {\n       \n        const blackKing = new ChessKing(this, 0, 3,false);\n        this.board[0][3] = blackKing\n\n        this.board[0][0] = new ChessRook(this, 0, 0,false);\n        this.board[0][7] = new ChessRook(this, 0, 7,false);\n\n        this.board[0][1] = new ChessKnight(this, 0, 1,false);\n        this.board[0][6] = new ChessKnight(this, 0, 6,false);\n\n        this.board[0][4] = new ChessQueen(this, 0, 4,false);\n        this.board[0][2] = new ChessBishop(this, 0, 2,false);\n        this.board[0][5] = new ChessBishop(this, 0, 5,false);\n\n        this.board[1][0] = new ChessPawn(this, 1, 0,false);\n        this.board[1][1] = new ChessPawn(this, 1, 1,false);\n        this.board[1][2] = new ChessPawn(this, 1, 2,false);\n        this.board[1][3] = new ChessPawn(this, 1, 3,false);\n        this.board[1][4] = new ChessPawn(this, 1, 4,false);\n        this.board[1][5] = new ChessPawn(this, 1, 5,false);\n        this.board[1][6] = new ChessPawn(this, 1, 6,false);\n        this.board[1][7] = new ChessPawn(this, 1, 7,false)\n\n\n\n\n        const whiteKing = new ChessKing(this, 7, 3,true);\n        this.board[7][3] = whiteKing\n        this.board[7][0] = new ChessRook(this, 7, 0,true);\n        this.board[7][7] = new ChessRook(this, 7, 7,true);\n        this.board[7][1] = new ChessKnight(this, 7, 1,true);\n        this.board[7][6] = new ChessKnight(this, 7, 6,true);\n        this.board[7][4] = new ChessQueen(this, 7, 4,true);\n        this.board[7][2] = new ChessBishop(this, 7, 2,true);\n        this.board[7][5] = new ChessBishop(this, 7, 5,true);\n\n        this.board[6][0] = new ChessPawn(this, 6, 0,true);\n        this.board[6][1] = new ChessPawn(this, 6, 1,true);\n        this.board[6][2] = new ChessPawn(this, 6, 2,true);\n        this.board[6][3] = new ChessPawn(this, 6, 3,true);\n        this.board[6][4] = new ChessPawn(this, 6, 4,true);\n        this.board[6][5] = new ChessPawn(this, 6, 5,true);\n        this.board[6][6] = new ChessPawn(this, 6, 6,true);\n        this.board[6][7] = new ChessPawn(this, 6, 7,true);\n\n\n\n       \n        \n        // set the aims for all pieces, whom they should protect and whom they should all attack\n        for (let i = 0; i < this.board.length; i++) {\n            for (let j = 0; j < this.board[i].length; j++) {\n                const cell = this.board[i][j];\n                if (cell) {\n                    this.pieceHash[cell.id] = cell;\n                    if (cell.isPieceWhite) { // if its my piece\n\n                        cell.king = whiteKing;\n                        cell.oppKing = blackKing;\n                    } else {\n                        cell.oppKing = whiteKing;\n                        cell.king = blackKing;\n                    }\n\n                }\n\n            }\n        }\n\n      \n    }\n\n    toString() {\n        return JSON.stringify(this.board.map(r => r.map(_ => _ ? `${_.id}-${_.name}` : 'null')));\n    }\n\n}\n\n\n\n\n","import { useEffect, useRef, useState } from \"react\";\nimport { ChessPiece } from \"../engine/ChessPiece\";\n\nfunction Bar({pieceWidth,horizontal}) {\n    const arr = horizontal ? ChessPiece.availableXMovements: ChessPiece.availableYMovements;\nreturn (\n\n\n                <div className={horizontal ?'Bar-X': ''} >\n                    {arr.map((c, x) => {\n                        return (<div key={x} className={horizontal ?'Bar-X': 'Board-X'} style={{ width: pieceWidth + 'px', height: pieceWidth + 'px', }}>\n                            {c}\n                        </div>)\n                    })}\n                </div>\n)\n    \n}\n\nexport default Bar;\n","import { useEffect, useRef, useState } from \"react\";\nimport { ChessBoard } from \"./engine/ChessBoard\";\nimport './Chess.css';\nimport { ChessPiece } from \"./engine/ChessPiece\";\nimport Bar from \"./misc/Bar\";\nimport { devLog } from '../env'\n\nfunction f(){\n    return Math.min(window.innerHeight, window.innerWidth) - 150\n}\n\n\nfunction ChessGame() {\n    const [size, setSize] = useState({\n        boardWidth: f(),\n        pieceWidth: (f()) / 8\n    })\n    const [board, setBoard] = useState([] as ChessPiece[][] | null[][])\n    const [availableMoves, setAvailableMoves] = useState({} as { [id: string]: boolean })\n    const [selectedPiece, setSelectedPiece] = useState(null as ChessPiece | null)\n     \n    const chessBoardRef = useRef(null as any as ChessBoard);\n\n    const [isWhiteTurnToPlay, setIsWhiteTurnToPlay] = useState(true);\n\n\n    function reloadBoard() {\n        chessBoardRef.current.isWhiteTurnToPlay = !chessBoardRef.current.isWhiteTurnToPlay\n        setBoard(chessBoardRef.current.board)\n        setAvailableMoves({});\n        setSelectedPiece(null);\n        setIsWhiteTurnToPlay(chessBoardRef.current.isWhiteTurnToPlay)\n    }\n    function init() {\n        chessBoardRef.current = new ChessBoard();\n\n        reloadBoard()\n    }\n\n\n    useEffect(() => {\n        init()\n        const cb = () => {\n            const boardWidth = f()\n            const pieceWidth = boardWidth / 8;\n\n            setSize(\n                {\n                    boardWidth,\n                    pieceWidth\n                }\n            )\n\n        }\n        window.addEventListener('resize', cb)\n        return () => {\n            window.removeEventListener('resize', cb)\n        }\n\n\n    }, [])\n\n    function onPieceClick(piece: ChessPiece | null, y: number, x: number) {\n        if (availableMoves[y + \",\" + x]) {\n            if (!selectedPiece?.move(y, x)) {\n                // invalid move\n                return;\n            }\n\n            reloadBoard()\n\n            \n\n\n        } else if (piece) {\n            devLog(piece.toString())\n            if (isWhiteTurnToPlay !== piece.isPieceWhite) {\n                setAvailableMoves({});\n                setSelectedPiece(null);\n                return;\n            }\n\n\n            // show available moves\n            const a = piece.availableMoves();\n\n            const _: { [id: string]: boolean } = {}\n            a.forEach(m => {\n\n                _[m.positionYIndex + \",\" + m.positionXIndex] = true\n            });\n\n            setAvailableMoves(_);\n            setSelectedPiece(piece);\n\n        } else {\n            setAvailableMoves({});\n            setSelectedPiece(null);\n        }\n\n    }\n\n    return (\n        <div className=\"Whole-Body\">\n\n            <div className=\"Chess-Field\">\n                <div className=\"Chess-Pre-Playable\">\n                    <Bar pieceWidth={size.pieceWidth} horizontal />\n                    <div className=\"Chess-Playable\">\n                        <Bar pieceWidth={size.pieceWidth} horizontal={false} />\n                        <div className='Board' style={{ width: size.boardWidth + 'px', height: size.boardWidth + 'px' }} >\n\n                            {board.map((row: ChessPiece[] | null[], y: number) => {\n\n                                return (<div key={y} className='Board-Y' style={{ display: 'flex' }}>\n\n\n\n                                    {row.map((piece: ChessPiece | null, x: number) => {\n\n                                        const shouldHighlight = availableMoves[y + \",\" + x];\n                                        return (<div onClick={() => onPieceClick(piece, y, x)} key={x} className='Board-X' style={{ width: size.pieceWidth + 'px', height: size.pieceWidth + 'px', backgroundColor: (x % 2 === 0) === (y % 2 === 0) ? 'rgba(245, 222, 179, 0.596)' : '' }}>\n                                            <div className={!piece ? '' : (isWhiteTurnToPlay !== piece.isPieceWhite) ? 'Piece-inner-invalid' : 'Piece-inner-valid'} style={{ width: '70%', height: '70%', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: !(shouldHighlight || piece && piece === selectedPiece) ? '' : 'rgba(255, 255, 0, 0.5)' }}>\n                                                {piece ? <i className={piece.icon} style={{ color: (piece.isPieceWhite ? \"white\" : \"black\") }} ></i> : ''}\n\n                                            </div>\n                                        </div>\n\n\n                                        )\n                                    })}\n\n\n\n                                </div>\n\n\n                                )\n                            })}\n                        </div>\n                        <Bar pieceWidth={size.pieceWidth} horizontal={false} />\n                    </div>\n                    <Bar pieceWidth={size.pieceWidth} horizontal />\n\n                </div>\n                <div className='Side' style={{ padding: '10px' }} >\n                    <div className='' style={{ padding: '0 30px' }} >\n                        Piece To Play\n                        <br />\n                        <i className={'fa fa-chess '} style={{ color: isWhiteTurnToPlay ? 'white' : 'black' }} ></i>\n                    </div> </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ChessGame;\n","import logo from './logo.svg';\nimport { BrowserRouter, Link, Redirect, Route, Router, Switch } from 'react-router-dom'\nimport ChessGame from './chess';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n\n\n        <Route path=\"/chess\" component={ChessGame} />\n\n\n        <Redirect path=\"/\" to=\"chess\" />\n\n\n\n      </Switch>\n\n    </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}